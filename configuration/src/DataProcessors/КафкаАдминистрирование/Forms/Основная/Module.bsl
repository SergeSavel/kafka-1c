// Copyright 2025 Сергей Савельев (serge@savel.pro)
//
// Лицензировано согласно Лицензии Apache, Версия 2.0 ("Лицензия");
// вы можете использовать этот файл только в соответствии с Лицензией.
// Вы можете найти копию Лицензии по адресу
//
// http://www.apache.org/licenses/LICENSE-2.0.
//
// За исключением случаев, когда это регламентировано существующим
// законодательством, или если это не оговорено в письменном соглашении,
// программное обеспечение, распространяемое на условиях данной Лицензии,
// предоставляется "КАК ЕСТЬ", и любые явные или неявные ГАРАНТИИ ОТВЕРГАЮТСЯ.
// Информацию об основных правах и ограничениях, применяемых к определенному
// языку согласно Лицензии, вы можете найти в данной Лицензии.

#Область КлиентскиеПеременные

&НаКлиенте
Перем Admin;
&НаКлиенте
Перем АдаптерПараметры;
&НаКлиенте
Перем АдаптерКодОтвета;
&НаКлиенте
Перем АдаптерОписаниеОшибки;

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Кластер = Константы.КафкаКластерПоУмолчанию.Получить();
	
	ВерсияПодсистемы = КафкаКлиентСервер.ВерсияПодсистемы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
	Если ЗначениеЗаполнено(Кластер) Тогда
		ПриИзмененииКластера();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
		
	Если Admin <> Неопределено И Не ЗавершениеРаботы Тогда
		Попытка
			AdminRelease();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Кластер

&НаКлиенте
Процедура КластерПриИзменении(Элемент)
	
	ПриИзмененииКластера();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКластера()
	
	Если Admin <> Неопределено Тогда
		AdminRelease();
	КонецЕсли;
	
	АдаптерПараметры = Неопределено;
	
	Если Не ЗначениеЗаполнено(Кластер) Тогда
		Возврат;
	КонецЕсли;
	
	АдаптерПараметры = ПолучитьПараметрыАдаптера(Кластер);
	
	ВерсияПрокси_ = GetVersion(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки);
	Если ВерсияПрокси_ = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;
	ВерсияПрокси = ВерсияПрокси_;
	
	Если Не AdminCreate() Тогда
		Возврат;
	КонецЕсли;
		
	ПодключитьОбработчикОжидания("ПериодическийAdminTouch", 60, Ложь);
		
	КластерОбновить();
	
	КонтрольДоступаИнициализировать();
	
	ТаблицаScramПользователи.Очистить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыАдаптера(Кластер)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Кластеры.ПроксиАдрес КАК ПроксиАдрес,
	|	Кластеры.ПроксиПользователь КАК ПроксиПользователь,
	|	Кластеры.ПроксиПароль КАК ПроксиПароль,
	|	Кластеры.ПроксиТаймаут КАК ПроксиТаймаут
	|ИЗ
	|	Справочник.КафкаКластеры КАК Кластеры
	|ГДЕ
	|	Кластеры.Ссылка = &Кластер");
	Запрос.УстановитьПараметр("Кластер", Кластер);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Передан некорректный параметр.";
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Результат.Вставить("ПроксиАдрес", Выборка.ПроксиАдрес);
	Результат.Вставить("ПроксиПользователь", Выборка.ПроксиПользователь);
	Результат.Вставить("ПроксиПароль", Выборка.ПроксиПароль);
	Результат.Вставить("ПроксиТаймаут", Выборка.ПроксиТаймаут);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПериодическийAdminTouch()
	
	Если Admin = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Успех = AdminTouch();
	
	Если Не Успех Тогда
		Если АдаптерКодОтвета = 404 Тогда
			Admin = Неопределено;
		Иначе
			Сообщить(АдаптерОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КластерОбновить()
	
	ТаблицаУзлы.Очистить();
	
	clusterDescription = AdminDescribeClusterНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin);
	Если clusterDescription = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	КластерId = clusterDescription.clusterId;
	КластерКонтроллер = clusterDescription.controller.host + ":" + Формат(clusterDescription.controller.port, "ЧН=0; ЧГ=0");
	
	Для Каждого node Из clusterDescription.nodes Цикл
		Строка = ТаблицаУзлы.Добавить();
		Строка.Id = node.id;
		Строка.Сервер = node.host;
		Строка.Порт = node.port;
		Строка.Стойка = node.rack;
	КонецЦикла;
	
	ТаблицаУзлы.Сортировать("Id");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУзлыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УзелКонфигурацияОбновить", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область УзелКонфигурация

&НаКлиенте
Процедура УзелКонфигурацияКомандаОбновить(Команда)
	
	УзелКонфигурацияОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УзелКонфигурацияОбновить()
	
	ТаблицаУзелКонфигурация.Очистить();
	
	ТекущиеДанныеУзла = Элементы.ТаблицаУзлы.ТекущиеДанные;
	Если ТекущиеДанныеУзла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	brokerConfigs = AdminDescribeBrokerConfigsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, ТекущиеДанныеУзла.Id);
	Если brokerConfigs = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Для Каждого configEntry Из brokerConfigs Цикл
		Если configEntry.sensitive Тогда
			Продолжить;
		КонецЕсли;
		Строка = ТаблицаУзелКонфигурация.Добавить();
		Строка.Имя = configEntry.name;
		Строка.Значение = configEntry.value;
		Строка.ТолькоЧтение = configEntry.readOnly;
		Строка.ПоУмолчанию = configEntry.default;
	КонецЦикла;
	
	ТаблицаУзелКонфигурация.Сортировать("Имя");
	
КонецПроцедуры

#КонецОбласти

#Область Темы

&НаКлиенте
Процедура ДеревоТемыРазделыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоТемыРазделы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТемыОбновить();
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ТемыРазделыПриАктивизацииСтроки", 0.1, Истина); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТемыРазделыПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.ДеревоТемыРазделы.ТекущиеДанные;
	
	Если ТекущиеДанные.Тип = "Тема" Тогда
		
		ТемаОбновить();
		
		Элементы.ГруппаТемыСтраницы.ТекущаяСтраница = Элементы.ГруппаТемыТема;
		
	ИначеЕсли ТекущиеДанные.Тип = "Раздел" Тогда
		
		РазделОбновить();
		
		Элементы.ГруппаТемыСтраницы.ТекущаяСтраница = Элементы.ГруппаТемыРаздел;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемыОбновить()
	
	СтрокиТемы = ДеревоТемыРазделы.ПолучитьЭлементы();
	
	СтрокиТемы.Очистить();
	
	topics = AdminListTopicsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin);
	Если topics = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Для Каждого topic Из topics Цикл
		Строка = СтрокиТемы.Добавить();
		Строка.Тип = "Тема";
		Строка.Id = topic.id;
		Строка.Имя = topic.name;
		Строка.Внутренняя = topic.internal;
		Строка.Данные = Новый Структура;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаОбновить()
	
	СтрокаТема = Элементы.ДеревоТемыРазделы.ТекущиеДанные;
	
	Если СтрокаТема.Тип <> "Тема" Тогда
		ВызватьИсключение "Неожиданное состояние.";
	КонецЕсли;
	
	topicDescription = Неопределено;
	Если Не СтрокаТема.Данные.Свойство("description", topicDescription) Тогда
		
		topicDescription = AdminDescribeTopicНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, СтрокаТема.Имя);
		Если topicDescription = Неопределено Тогда
			Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
			Возврат;
		КонецЕсли;
		
		СтрокаТема.Данные.Вставить("description", topicDescription);
		
		СтрокиРазделы = СтрокаТема.ПолучитьЭлементы();
		СтрокиРазделы.Очистить();
		Для Каждого partitionDescription Из topicDescription.partitions Цикл
			Строка = СтрокиРазделы.Добавить();
			Строка.Тип = "Раздел";
			Строка.Id = Формат(partitionDescription.partition, "ЧН=; ЧГ=");
			Строка.Имя = "Раздел " + Строка.Id;
			Строка.Внутренняя = СтрокаТема.Внутренняя;
			Строка.Данные = Новый Структура;
			Строка.Данные.Вставить("description", partitionDescription);
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаТемаРазделы.Очистить();
	Для Каждого partitionDescription Из topicDescription.partitions Цикл
		СтрокаРаздел = ТаблицаТемаРазделы.Добавить();
		СтрокаРаздел.Раздел = partitionDescription.partition;
		СтрокаРаздел.Лидер = partitionDescription.leader.host + ":" + Формат(partitionDescription.leader.port, "ЧН=0; ЧГ=0");
	КонецЦикла;
	
	ТаблицаТемаРазделы.Сортировать("Раздел");
	
	ТемаДанныеИнициализировать();
	
	ТаблицаТемаКонфигурация.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура РазделОбновить()
	
	СтрокаРаздел = Элементы.ДеревоТемыРазделы.ТекущиеДанные;
	
	Если СтрокаРаздел.Тип <> "Раздел" Тогда
		ВызватьИсключение "Неожиданное состояние.";
	КонецЕсли;
	
	partitionDescription = СтрокаРаздел.Данные.description;
	
	ТаблицаРазделРеплики.Очистить();
	
	Для Каждого replica Из partitionDescription.replicas Цикл
		Строка = ТаблицаРазделРеплики.Добавить();
		Строка.Id = replica.id;
		Строка.Сервер = replica.host;
		Строка.Порт = replica.port;
		Строка.Стойка = replica.rack;
	КонецЦикла;
	
	ТаблицаРазделРеплики.Сортировать("Id");
	
	СтруктураПоиск = Новый Структура("Id, Сервер, Порт");
	
	Для Каждого replica Из partitionDescription.isr Цикл
		СтруктураПоиск.Id = replica.id;
		СтруктураПоиск.Сервер = replica.host;
		СтруктураПоиск.Порт = replica.port;
		МассивСтрок = ТаблицаРазделРеплики.НайтиСтроки(СтруктураПоиск);
		Для Каждого Строка Из МассивСтрок Цикл
			Строка.Синхронизирован = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Если partitionDescription.leader <> Неопределено Тогда
		СтруктураПоиск.Id = partitionDescription.leader.id;
		СтруктураПоиск.Сервер = partitionDescription.leader.host;
		СтруктураПоиск.Порт = partitionDescription.leader.port;
		МассивСтрок = ТаблицаРазделРеплики.НайтиСтроки(СтруктураПоиск);
		Для Каждого Строка Из МассивСтрок Цикл
			Строка.Лидер = Истина;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТемыКомандаОбновить(Команда)
	
	ТемыОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТемыКомандаСоздать(Команда)
	
	ОткрытьФорму(
			"Обработка.КафкаАдминистрирование.Форма.СозданиеТемы",
			,
			ЭтаФорма,
			,
			,
			,
			Новый ОписаниеОповещения("ТемыСоздатьПриЗакрытииФормы", ЭтаФорма),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемыСоздатьПриЗакрытииФормы(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	topicName = РезультатЗакрытия.ИмяТемы;
	
	numPartitions = РезультатЗакрытия.КоличествоРазделов;
	Если numPartitions = 0 Тогда
		numPartitions = Неопределено;
	КонецЕсли;
	
	replicationFactor = РезультатЗакрытия.КоэффициентРепликации;
	Если replicationFactor = 0 Тогда
		replicationFactor = Неопределено;
	КонецЕсли;
	
	Успех = AdminCreateTopicНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, topicName, numPartitions, replicationFactor);
	Если Успех = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ТемыОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТемыКомандаУдалить(Команда)
	
	СтрокаТема = Элементы.ДеревоТемыРазделы.ТекущиеДанные;
	
	Если СтрокаТема.Тип <> "Тема" Тогда
		ВызватьИсключение "Неожиданное состояние.";
	КонецЕсли;
	
	ПоказатьВопрос(
			Новый ОписаниеОповещения("ТемыУдалитьПриОтветеНаВопрос", ЭтаФорма, Новый Структура("ТемаИмя", СтрокаТема.Имя)),
			"Вы действительно хотите удалить тему """ + СтрокаТема.Имя + """?",
			РежимДиалогаВопрос.ДаНет,
			60,
			КодВозвратаДиалога.Нет,
			"Удаление темы",
			КодВозвратаДиалога.Нет
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемыУдалитьПриОтветеНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТемаИмя = ДополнительныеПараметры.ТемаИмя;
	
	Успех = AdminDeleteTopicНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, ТемаИмя);
	Если Успех = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;

	ТемыОбновить();
	
КонецПроцедуры

#КонецОбласти

#Область ТемаДанные

&НаКлиенте
Процедура ТемаДанныеИнициализировать()
	
	ТаблицаТемаСообщения = "Новые";
	ТаблицаТемаКоличествоНаРаздел = 50;
	
	ТаблицаТемаДанные.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаДанныеКомандаПолучитьСообщения(Команда)
	
	ТаблицаТемаДанные.Очистить();
	
	СтрокаТема = Элементы.ДеревоТемыРазделы.ТекущиеДанные;
	Если СтрокаТема.Тип <> "Тема" Тогда
		ВызватьИсключение "Неожиданное состояние.";
	КонецЕсли;
	
	Records = ConsumerGetMessagesНаСервере(Кластер, АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, СтрокаТема.Имя, ТаблицаТемаСообщения, ТаблицаТемаКоличествоНаРаздел);
	Если Records = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Для Каждого Record Из Records Цикл
		СтрокаТемаДанные = ТаблицаТемаДанные.Добавить();
		СтрокаТемаДанные.Раздел = Record.partition;
		СтрокаТемаДанные.Ключ = Record.key;
		СтрокаТемаДанные.Значение = Record.value;
		СтрокаТемаДанные.МоментВремени = ПредставлениеМоментаВремени(Record.timestamp);
		СтрокаТемаДанные.Смещение = Record.offset;
		Для Каждого Header Из Record.headers Цикл
			СтрокаЗаголовок = СтрокаТемаДанные.Заголовки.Добавить();
			СтрокаЗаголовок.Ключ = Header.key;
			СтрокаЗаголовок.Значение = Header.Value;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаТемаДанные.Сортировать("МоментВремени");
	
КонецПроцедуры

#КонецОбласти

#Область ТемаКонфигурация

&НаКлиенте
Процедура ТемаКонфигурацияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаТемаКонфигурация.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТемаКонфигурацияОбновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаКонфигурацияКомандаОбновить(Команда)
	
	ТемаКонфигурацияОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаКонфигурацияОбновить()
	
	ТаблицаТемаКонфигурация.Очистить();
	
	СтрокаТема = Элементы.ДеревоТемыРазделы.ТекущиеДанные;
	Если СтрокаТема.Тип <> "Тема" Тогда
		ВызватьИсключение "Неожиданное состояние.";
	КонецЕсли;
	
	topicConfigs = AdminDescribeTopicConfigsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, СтрокаТема.Имя);
	Если topicConfigs = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;
		
	Для Каждого configEntry Из topicConfigs Цикл
		Если configEntry.sensitive Тогда
			Продолжить;
		КонецЕсли;
		Строка = ТаблицаТемаКонфигурация.Добавить();
		Строка.Имя = configEntry.name;
		Строка.Значение = configEntry.value;
		Строка.ТолькоЧтение = configEntry.readOnly;
		Строка.ПоУмолчанию = configEntry.default;
	КонецЦикла;
	
	ТаблицаТемаКонфигурация.Сортировать("Имя");
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаКонфигурацияКомандаИзменить(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаТемаКонфигурация.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВводСтроки(
			Новый ОписаниеОповещения("ТемаКонфигурацияИзменитьПослеВводаЗначения", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные)),
			ТекущиеДанные.Значение,
			ТекущиеДанные.Имя
	);
		
КонецПроцедуры

&НаКлиенте
Процедура ТемаКонфигурацияИзменитьПослеВводаЗначения(НовоеЗначение, ДопПараметры) Экспорт
	
	Если НовоеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТема = Элементы.ДеревоТемыРазделы.ТекущиеДанные;
	Если СтрокаТема.Тип <> "Тема" Тогда
		ВызватьИсключение "Неожиданное состояние.";
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Результат = AdminSetTopicConfigНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, СтрокаТема.Имя, ТекущиеДанные.Имя, НовоеЗначение);
	Если Результат = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;
		
	ТемаКонфигурацияОбновить();

КонецПроцедуры

&НаКлиенте
Процедура ТемаКонфигурацияКомандаСбросить(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаТемаКонфигурация.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(
			Новый ОписаниеОповещения("ТемаКонфигурацияСброситьПриОтветеНаВопрос", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные)),
			"Вы действительно хотите сбросить значение параметра?",
			РежимДиалогаВопрос.ДаНет,
			60,
			КодВозвратаДиалога.Нет,
			ТекущиеДанные.Имя,
			КодВозвратаДиалога.Нет
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаКонфигурацияСброситьПриОтветеНаВопрос(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТема = Элементы.ДеревоТемыРазделы.ТекущиеДанные;
	Если СтрокаТема.Тип <> "Тема" Тогда
		ВызватьИсключение "Неожиданное состояние.";
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Результат = AdminDeleteTopicConfigНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, СтрокаТема.Имя, ТекущиеДанные.Имя);
	Если Результат = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;
		
	ТемаКонфигурацияОбновить();
	
КонецПроцедуры

#КонецОбласти

#Область ScramПользователи

&НаКлиенте
Процедура ScramПользователиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаScramПользователи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ScramПользователиОбновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ScramПользователиКомандаОбновить(Команда)
	
	ScramПользователиОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ScramПользователиОбновить()
	
	ТаблицаScramПользователи.Очистить();
	
	userScramCredentials = AdminDescribeUserScramCredentialsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin);
	Если userScramCredentials = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;
		
	Для Каждого scramCredentialDescription Из userScramCredentials Цикл
		Для Каждого credentialInfo Из scramCredentialDescription.credentialInfos Цикл
			Строка = ТаблицаScramПользователи.Добавить();
			Строка.Пользователь = scramCredentialDescription.name;
			Строка.Механизм = credentialInfo.scramMechanism;
			Строка.КоличествоИтераций = credentialInfo.iterations;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаScramПользователи.Сортировать("Пользователь, Механизм, КоличествоИтераций");
	
КонецПроцедуры

&НаКлиенте
Процедура ScramПользователиКомандаДобавить(Команда)
	
	ОткрытьФорму(
			"Обработка.КафкаАдминистрирование.Форма.ДобавлениеScramПользователя",
			,
			ЭтаФорма,
			,
			,
			,
			Новый ОписаниеОповещения("ScramПользователиДобавитьПриЗакрытииФормы", ЭтаФорма),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ScramПользователиДобавитьПриЗакрытииФормы(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	User = РезультатЗакрытия.Пользователь;
	Mechanism = РезультатЗакрытия.Механизм;
	Password = РезультатЗакрытия.Пароль;
	
	Успех = AdminUpsertUserScramCredentialsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, User, Mechanism, Password);
	Если Успех = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;

	ScramПользователиОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ScramПользователиКомандаИзменить(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаScramПользователи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
			"Обработка.КафкаАдминистрирование.Форма.ИзменениеScramПользователя",
			Новый Структура("Пользователь, Механизм", ТекущиеДанные.Пользователь, ТекущиеДанные.Механизм),
			ЭтаФорма,
			,
			,
			,
			Новый ОписаниеОповещения("ScramПользователиИзменитьПриЗакрытииФормы", ЭтаФорма),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ScramПользователиИзменитьПриЗакрытииФормы(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	User = РезультатЗакрытия.Пользователь;
	Mechanism = РезультатЗакрытия.Механизм;
	Password = РезультатЗакрытия.Пароль;
	
	Успех = AdminUpsertUserScramCredentialsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, User, Mechanism, Password);
	Если Успех = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;

	ScramПользователиОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ScramПользователиКомандаУдалить(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаScramПользователи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(
			Новый ОписаниеОповещения("ScramПользователиУдалитьПриОтветеНаВопрос", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные)),
			"Вы действительно хотите удалить пользователя """ + ТекущиеДанные.Пользователь + " (" + ТекущиеДанные.Механизм + ")""?",
			РежимДиалогаВопрос.ДаНет,
			60,
			КодВозвратаДиалога.Нет,
			"Удаление пользователя",
			КодВозвратаДиалога.Нет
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ScramПользователиУдалитьПриОтветеНаВопрос(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	
	Успех = AdminDeleteUserScramCredentialsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, ТекущиеДанные.Пользователь, ТекущиеДанные.Механизм);
	Если Успех = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;

	ScramПользователиОбновить();
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольДоступа

&НаКлиенте
Процедура КонтрольДоступаИнициализировать()
	
	КонтрольДоступаФильтрResourceType = "ANY";
	КонтрольДоступаФильтрResourceName = "";
	КонтрольДоступаФильтрResourcePatternType = "ANY";
		
	ТаблицаКонтрольДоступа.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДоступаКомандаПрочитать(Команда)
	
	КонтрольДоступаПрочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДоступаПрочитать()
	
	Если Не ЗначениеЗаполнено(КонтрольДоступаФильтрResourceType) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "КонтрольДоступаФильтрResourceType";
		Сообщение.Текст = "Не заполнен фильтр ""Resource Type"".";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтрольДоступаФильтрResourcePatternType) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "КонтрольДоступаФильтрResourcePatternType";
		Сообщение.Текст = "Не заполнен фильтр ""Pattern Type"".";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТаблицаКонтрольДоступа.Очистить();
	
	ResourcePatternFilter = КонтрольДоступаNewResourcePatternFilter(
			КонтрольДоступаФильтрResourceType,
			КонтрольДоступаФильтрResourceName,
			КонтрольДоступаФильтрResourcePatternType
	);
	
	AclBindingFilter = КонтрольДоступаNewAclBindingFilter(ResourcePatternFilter);
		
	aclBindings = AdminDescribeAclsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, AclBindingFilter);
	Если aclBindings = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Для Каждого aclBinding Из aclBindings Цикл
		
		Строка = ТаблицаКонтрольДоступа.Добавить();
				
		Строка.ResourceType			= aclBinding.pattern.resourceType;
		Строка.ResourceName			= aclBinding.pattern.name;
		Строка.ResourcePatternType	= aclBinding.pattern.patternType;

		Строка.EntryPrincipal	= aclBinding.entry.principal;
		Строка.EntryHost		= aclBinding.entry.host;
		Строка.EntryOperation	= aclBinding.entry.operation;
		Строка.EntryPermission	= aclBinding.entry.permissionType;
		
		КонтрольДоступаОбновитьИсходныеЗначенияСтроки(Строка);
		
	КонецЦикла;
		
	Элементы.ТаблицаКонтрольДоступа.ТолькоПросмотр = Ложь;
	Элементы.КонтрольДоступаЗаписать.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДоступаКомандаЗаписать(Команда)
	
	КонтрольДоступаЗаписать();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДоступаЗаписать()
	
	// Проверка
	
	Отказ = Ложь;
	
	ИндексСтроки = 0;
	
	Пока ИндексСтроки < ТаблицаКонтрольДоступа.Количество() Цикл
		
		Строка = ТаблицаКонтрольДоступа[ИндексСтроки];
		
		ИндексСтроки = ИндексСтроки + 1;
		
		Если Не (Строка.Добавить Или Строка.Удалить) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ResourceType) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ResourcePatternType) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если СтрНайти(Строка.EntryPrincipal, ":") = 0 Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.EntryOperation) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.EntryPermission) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ПоказатьПредупреждение(
				,
				"Не все поля измененных строк таблицы заполнены корректно.",
				,
				"Контроль доступа"
		);
		Возврат;
	КонецЕсли;
	
	// Запись
	
	ИндексСтроки = 0;
	
	Пока ИндексСтроки < ТаблицаКонтрольДоступа.Количество() Цикл
		
		Строка = ТаблицаКонтрольДоступа[ИндексСтроки];
		
		Если Строка.Удалить Тогда
			
			ResourcePatternFilter = КонтрольДоступаNewResourcePatternFilter(
					Строка.ResourceTypeИсходный,
					Строка.ResourceNameИсходный,
					Строка.ResourcePatternTypeИсходный
			);
			
			AccessControlEntryFilter = КонтрольДоступаNewAccessControlEntryFilter(
					Строка.EntryPrincipalИсходный,
					Строка.EntryHostИсходный,
					Строка.EntryOperationИсходный,
					Строка.EntryPermissionИсходный
			);
			
			AclBindingFilter = КонтрольДоступаNewAclBindingFilter(
					ResourcePatternFilter,
					AccessControlEntryFilter
			);
						
			AclBindingFilters = Новый Массив;
			AclBindingFilters.Добавить(AclBindingFilter);
			
			Result = AdminDeleteAclsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, AclBindingFilters);
			Если Result = Неопределено Тогда
				Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
				Возврат;
			КонецЕсли;
			
			Строка.Удалить = Ложь;
			
			Если Не Строка.Добавить Тогда
				ТаблицаКонтрольДоступа.Удалить(Строка);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Строка.Добавить Тогда
			
			ResourcePattern = КонтрольДоступаNewResourcePattern(
					Строка.ResourceType,
					Строка.ResourceName,
					Строка.ResourcePatternType
			);
			
			AccessControlEntry = КонтрольДоступаNewAccessControlEntry(
					Строка.EntryPrincipal,
					Строка.EntryHost,
					Строка.EntryOperation,
					Строка.EntryPermission
			);
			
			AclBinding = КонтрольДоступаNewAclBinding(
					ResourcePattern,
					AccessControlEntry
			);
						
			AclBindings = Новый Массив;
			AclBindings.Добавить(AclBinding);
			
			Result = AdminCreateAclsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, AclBindings);
			Если Result = Неопределено Тогда
				Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
				Возврат;
			КонецЕсли;
			
			Строка.Добавить = Ложь;
			
			КонтрольДоступаОбновитьИсходныеЗначенияСтроки(Строка);
			
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДоступаТаблицаПриНачалеРедактированияСтроки(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные; 
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.Добавить = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДоступаТаблицаПередОкончаниемРедактированияСтроки(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Не ТекущиеДанные.Добавить И Не ТекущиеДанные.Удалить Тогда
		
		// эта строка не модифицировалась ранее
		ТекущиеДанные.Добавить = Истина;
		ТекущиеДанные.Удалить = Истина;
		
	ИначеЕсли ТекущиеДанные.Добавить И ТекущиеДанные.Удалить Тогда
		
		// это модифицированная строка, все нужные флаги уже есть
		
	ИначеЕсли ТекущиеДанные.Добавить И Не ТекущиеДанные.Удалить Тогда
		
		// это новая строка, менять флаги не нужно
		
	Иначе
		ВызватьИсключение "Неожиданное состояние.";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДоступаТаблицаПередУдалениемСтроки(Элемент, Отказ)
		
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Не ТекущиеДанные.Добавить И Не ТекущиеДанные.Удалить Тогда
		
		// эта строка не модифицировалась ранее
		Отказ = Истина;
		ТекущиеДанные.Удалить = Истина;
		
	ИначеЕсли ТекущиеДанные.Добавить И ТекущиеДанные.Удалить Тогда
		
		// это модифицированная строка
		Отказ = Истина;
		ТекущиеДанные.Добавить = Ложь;
		ТекущиеДанные.Удалить = Истина;
		КонтрольДоступаВосстановитьИсходныеЗначенияСтроки(ТекущиеДанные);
		
	ИначеЕсли Не ТекущиеДанные.Добавить И ТекущиеДанные.Удалить Тогда
		
		// это ранее помеченная на удаление строка
		Отказ = Истина;
		ТекущиеДанные.Удалить = Ложь;
		
	ИначеЕсли ТекущиеДанные.Добавить И Не ТекущиеДанные.Удалить Тогда
		
		// это новая строка, ее можно просто удалить
		
	Иначе
		ВызватьИсключение "Неожиданное состояние.";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДоступаОбновитьИсходныеЗначенияСтроки(Строка)
	
	Строка.ResourceTypeИсходный			= Строка.ResourceType;
	Строка.ResourceNameИсходный			= Строка.ResourceName;
	Строка.ResourcePatternTypeИсходный	= Строка.ResourcePatternType;
	
	Строка.EntryPrincipalИсходный	= Строка.EntryPrincipal;
	Строка.EntryHostИсходный		= Строка.EntryHost;
	Строка.EntryOperationИсходный	= Строка.EntryOperation;
	Строка.EntryPermissionИсходный	= Строка.EntryPermission;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДоступаВосстановитьИсходныеЗначенияСтроки(Строка)
	
	Строка.ResourceType			= Строка.ResourceTypeИсходный;
	Строка.ResourceName			= Строка.ResourceNameИсходный;
	Строка.ResourcePatternType	= Строка.ResourcePatternTypeИсходный;
	
	Строка.EntryPrincipal	= Строка.EntryPrincipalИсходный;
	Строка.EntryHost		= Строка.EntryHostИсходный;
	Строка.EntryOperation	= Строка.EntryOperationИсходный;
	Строка.EntryPermission	= Строка.EntryPermissionИсходный;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КонтрольДоступаNewResourcePatternFilter(ResourceType, Name, ResourcePatternType)
	
	ResourcePatternFilter = Новый Структура;
	ResourcePatternFilter.Вставить("resourceType", ResourceType);
	ResourcePatternFilter.Вставить("name", ?(ЗначениеЗаполнено(Name), Name, Неопределено));
	ResourcePatternFilter.Вставить("patternType", ResourcePatternType);
	
	Возврат ResourcePatternFilter;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КонтрольДоступаNewAccessControlEntryFilter(Principal, Host, Operation, PermissionType)
	
	AccessControlEntryFilter = Новый Структура;
	AccessControlEntryFilter.Вставить("principal", ?(ЗначениеЗаполнено(Principal), Principal, Неопределено));
	AccessControlEntryFilter.Вставить("host", ?(ЗначениеЗаполнено(Host), Host, Неопределено));
	AccessControlEntryFilter.Вставить("operation", Operation);
	AccessControlEntryFilter.Вставить("permissionType", PermissionType);
	
	Возврат AccessControlEntryFilter;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КонтрольДоступаNewAclBindingFilter(ResourcePatternFilter = Неопределено, AccessControlEntryFilter = Неопределено)
	
	AclBindingFilter = Новый Структура;
	AclBindingFilter.Вставить("patternFilter", ResourcePatternFilter);
	AclBindingFilter.Вставить("entryFilter", AccessControlEntryFilter);
	
	Возврат AclBindingFilter;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КонтрольДоступаNewResourcePattern(ResourceType, Name, PatternType)
	
	ResourcePattern = Новый Структура;
	ResourcePattern.Вставить("resourceType", ResourceType);
	ResourcePattern.Вставить("name", ?(ЗначениеЗаполнено(Name), Name, "*"));
	ResourcePattern.Вставить("patternType", PatternType);
	
	Возврат ResourcePattern;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КонтрольДоступаNewAccessControlEntry(Principal, Host, Operation, PermissionType)
	
	AccessControlEntry = Новый Структура;
	AccessControlEntry.Вставить("principal", Principal);
	AccessControlEntry.Вставить("host", ?(ЗначениеЗаполнено(Host), Host, "*"));
	AccessControlEntry.Вставить("operation", Operation);
	AccessControlEntry.Вставить("permissionType", PermissionType);
	
	Возврат AccessControlEntry;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КонтрольДоступаNewAclBinding(ResourcePattern, AccessControlEntry)
	
	AclBinding = Новый Структура;
	AclBinding.Вставить("pattern", ResourcePattern);
	AclBinding.Вставить("entry", AccessControlEntry);
	
	Возврат AclBinding;
	
КонецФункции

#КонецОбласти

#Область Кафка

&НаСервереБезКонтекста
Функция Адаптер(Параметры)
	
	Адаптер = Обработки.КафкаАдаптер.Создать();
	
	Адаптер.Инициализировать(
			Параметры.ПроксиАдрес,
			Параметры.ПроксиПользователь,
			Параметры.ПроксиПароль,
			Параметры.ПроксиТаймаут,
	);
	
	Возврат Адаптер;
	
КонецФункции

&НаКлиенте
Функция AdminCreate()
	
	Admin = AdminCreateНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Кластер);
	
	Если Admin = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
	КонецЕсли;
	
	Возврат (Admin <> Неопределено);
	
КонецФункции
&НаСервереБезКонтекста
Функция AdminCreateНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Кластер)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Конфигурация = КафкаСервер.КонфигурацияБазовая(Кластер);
	
	Admin = Адаптер.AdminCreate("Обработка КафкаАдминистрирование", Конфигурация, 120000);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Admin;
	
КонецФункции

&НаКлиенте
Функция AdminRelease()
		
	Результат = AdminReleaseНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin);
	
	Admin = Неопределено;
	
	Если Результат = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
	КонецЕсли;
	
	Возврат (Результат <> Неопределено);
	
КонецФункции
&НаСервереБезКонтекста
Функция AdminReleaseНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminRelease(Admin);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция AdminTouch()
		
	Результат = AdminTouchНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin);
	
	Если Результат = Неопределено Тогда
		Сообщить(Строка(АдаптерКодОтвета) + " " + АдаптерОписаниеОшибки);
	КонецЕсли;
	
	Возврат (Результат <> Неопределено);
	
КонецФункции
&НаСервереБезКонтекста
Функция AdminTouchНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminTouch(Admin);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат; 
	
КонецФункции

&НаСервереБезКонтекста
Функция AdminDescribeClusterНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminDescribeCluster(Admin);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат; 
	
КонецФункции

&НаСервереБезКонтекста
Функция AdminListTopicsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	МассивРезультат = Адаптер.AdminListTopics(Admin);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Если МассивРезультат <> Неопределено Тогда
		СписокРезультат = Новый СписокЗначений;
		Для Каждого topicInfo Из МассивРезультат Цикл
			ЭлементРезультат = СписокРезультат.Добавить(topicInfo, topicInfo.name);
		КонецЦикла;
		СписокРезультат.СортироватьПоПредставлению();
		МассивРезультат = СписокРезультат.ВыгрузитьЗначения();
	КонецЕсли;
	
	Возврат МассивРезультат;
	
КонецФункции

&НаСервереБезКонтекста
Функция AdminDescribeTopicНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, topic)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminDescribeTopic(Admin, topic);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция AdminDescribeBrokerConfigsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, brokerId)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminDescribeBrokerConfigs(Admin, brokerId);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция AdminDescribeTopicConfigsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, topicName)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminDescribeTopicConfigs(Admin, topicName);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция AdminCreateTopicНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, topicName, numPartitions, replicationFactor)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminCreateTopic(Admin, topicName, numPartitions, replicationFactor);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат; 
	
КонецФункции

&НаСервереБезКонтекста
Функция AdminDeleteTopicНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, topicName)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminDeleteTopic(Admin, topicName);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ConsumerGetMessagesНаСервере(Кластер, АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Тема, СтарыеИлиНовые, КоличествоНаРаздел)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Конфигурация = КафкаСервер.КонфигурацияПолучателя(Кластер);
	Конфигурация.Вставить("auto.offset.reset", "earliest");
	Конфигурация.Вставить("enable.auto.commit", "false");
	
	Consumer = Адаптер.ConsumerCreate("Обработка КафкаАдминистрирование", Конфигурация, 120000);
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	Если Consumer = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		
		Результат = ConsumerGetMessagesНаСервере_(АдаптерКодОтвета, АдаптерОписаниеОшибки, Тема, СтарыеИлиНовые, КоличествоНаРаздел, Адаптер, Consumer);
		
		Адаптер.ConsumerRelease(Consumer);
		//АдаптерКодОтвета = Адаптер.КодОтвета;
		//АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
		
	Исключение
		Адаптер.ConsumerRelease(Consumer);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
&НаСервереБезКонтекста
Функция ConsumerGetMessagesНаСервере_(АдаптерКодОтвета, АдаптерОписаниеОшибки, Тема, СтарыеИлиНовые, КоличествоНаРаздел, Адаптер, Consumer)
	
	Результат = Новый Массив;
	
	TopicPartitions = Адаптер.ConsumerListPartitions(Consumer, Тема);
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	Если TopicPartitions = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Assignment = Новый Массив;
	Для Каждого Partition Из TopicPartitions Цикл
		Assignment.Добавить(Новый Структура("topic, partition", Partition.topic, Partition.partition));
	КонецЦикла;
		
	BeginningOffsets = Адаптер.ConsumerGetBeginningOffsets(Consumer, Assignment);
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	Если BeginningOffsets = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	EndOffsets = Адаптер.ConsumerGetEndOffsets(Consumer, Assignment);
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	Если EndOffsets = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОставшиесяРазделы = Новый Соответствие;
	
	Для Каждого КлючЗначение Из BeginningOffsets Цикл
		ОставшиесяРазделы2 = ОставшиесяРазделы.Получить(КлючЗначение.Ключ);
		Если ОставшиесяРазделы2 = Неопределено Тогда
			ОставшиесяРазделы2 = Новый Соответствие;
			ОставшиесяРазделы.Вставить(КлючЗначение.Ключ, ОставшиесяРазделы2);
		КонецЕсли;
		Для Каждого PartitionOffset Из КлючЗначение.Значение Цикл
			СтруктураСмещения = ОставшиесяРазделы2.Получить(PartitionOffset.partition);
			Если СтруктураСмещения = Неопределено Тогда
				СтруктураСмещения = Новый Структура;
				ОставшиесяРазделы2.Вставить(PartitionOffset.partition, СтруктураСмещения);
			КонецЕсли;
			СтруктураСмещения.Вставить("beginningOffset", PartitionOffset.offset);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого КлючЗначение Из EndOffsets Цикл
		ОставшиесяРазделы2 = ОставшиесяРазделы.Получить(КлючЗначение.Ключ);
		Если ОставшиесяРазделы2 = Неопределено Тогда
			ОставшиесяРазделы2 = Новый Соответствие;
			ОставшиесяРазделы.Вставить(КлючЗначение.Ключ, ОставшиесяРазделы2);
		КонецЕсли;
		Для Каждого PartitionOffset Из КлючЗначение.Значение Цикл
			СтруктураСмещения = ОставшиесяРазделы2.Получить(PartitionOffset.partition);
			Если СтруктураСмещения = Неопределено Тогда
				СтруктураСмещения = Новый Структура;
				ОставшиесяРазделы2.Вставить(PartitionOffset.partition, СтруктураСмещения);
			КонецЕсли;
			СтруктураСмещения.Вставить("endOffset", PartitionOffset.offset);
		КонецЦикла;
	КонецЦикла;
	
	УдалитьТемы = Новый Массив;
	УдалитьРазделы = Новый Массив;
	Assignment = Новый Массив;
	
	Для Каждого КлючЗначениеТема Из ОставшиесяРазделы Цикл
				
		УдалитьРазделы.Очистить();
		
		Для Каждого КлючЗначениеРаздел Из КлючЗначениеТема.Значение Цикл
			
			СтруктураСмещения = КлючЗначениеРаздел.Значение;
			СтруктураСмещения.Вставить("readingStopped", Ложь);
			
			Если СтруктураСмещения.beginningOffset = СтруктураСмещения.endOffset Тогда
				УдалитьРазделы.Добавить(КлючЗначениеРаздел.Ключ);
				Продолжить;
			КонецЕсли;
			
			Assignment.Добавить(Новый Структура("topic, partition", КлючЗначениеТема.Ключ, КлючЗначениеРаздел.Ключ));
			
			Если СтарыеИлиНовые = "Старые" Тогда
				СтруктураСмещения.Вставить("currentOffset", СтруктураСмещения.beginningOffset);
				СтруктураСмещения.Вставить("stopOffset", Мин(СтруктураСмещения.beginningOffset + КоличествоНаРаздел, СтруктураСмещения.endOffset - 1));
			ИначеЕсли СтарыеИлиНовые = "Новые" Тогда
				СтруктураСмещения.Вставить("currentOffset", Макс(СтруктураСмещения.beginningOffset, СтруктураСмещения.endOffset - КоличествоНаРаздел));
				СтруктураСмещения.Вставить("stopOffset", СтруктураСмещения.endOffset - 1);
			Иначе
				ВызватьИсключение "Неожиданное состояние.";
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Ключ Из УдалитьРазделы Цикл
			КлючЗначениеТема.Значение.Удалить(Ключ);
		КонецЦикла;
		
		Если КлючЗначениеТема.Значение.Количество() = 0 Тогда
			УдалитьТемы.Добавить(КлючЗначениеТема.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Ключ Из УдалитьТемы Цикл
		ОставшиесяРазделы.Удалить(Ключ);
	КонецЦикла;
	
	Если Assignment.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Успех = Адаптер.ConsumerAssign(Consumer, Assignment);
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	Если Успех <> Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КоличествоОставшихсяРазделов = 0;
	
	Для Каждого КлючЗначениеТема Из ОставшиесяРазделы Цикл
		Для Каждого КлючЗначениеРаздел Из КлючЗначениеТема.Значение Цикл
			
			Успех = Адаптер.ConsumerSeek(Consumer, КлючЗначениеТема.Ключ, КлючЗначениеРаздел.Ключ, КлючЗначениеРаздел.Значение.currentOffset);
			АдаптерКодОтвета = Адаптер.КодОтвета;
			АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
			Если Успех <> Истина Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			КоличествоОставшихсяРазделов = КоличествоОставшихсяРазделов + 1;
			
		КонецЦикла;
	КонецЦикла;
	
	Пока КоличествоОставшихсяРазделов > 0 Цикл
		
		Records = Адаптер.ConsumerPoll(Consumer, 30000);
		АдаптерКодОтвета = Адаптер.КодОтвета;
		АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
		Если Records = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого Record Из Records Цикл
			
			Результат.Добавить(Record);
			
			СтруктураСмещения = ОставшиесяРазделы[Record.topic][Record.partition];
			СтруктураСмещения.currentOffset = Record.offset;
			
			Если СтруктураСмещения.currentOffset >= СтруктураСмещения.stopOffset Тогда
				Если Не СтруктураСмещения.readingStopped Тогда
					СтруктураСмещения.readingStopped = Истина;
					КоличествоОставшихсяРазделов = КоличествоОставшихсяРазделов - 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция AdminSetTopicConfigНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, TopicName, ConfigName, NewValue)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminSetTopicConfig(Admin, TopicName, ConfigName, NewValue);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат; 
		
КонецФункции

&НаСервереБезКонтекста
Функция AdminDeleteTopicConfigНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, TopicName, ConfigName)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminDeleteTopicConfig(Admin, TopicName, ConfigName);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат; 
		
КонецФункции

&НаСервереБезКонтекста
Функция AdminDescribeUserScramCredentialsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminDescribeUserScramCredentials(Admin);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция AdminUpsertUserScramCredentialsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, User, Mechanism, Password)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminUpsertUserScramCredentials(Admin, User, Mechanism, Password);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция AdminDeleteUserScramCredentialsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, User, Mechanism)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminDeleteUserScramCredentials(Admin, User, Mechanism);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция AdminDescribeAclsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, AclBindingsFilter)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminDescribeAcls(Admin, AclBindingsFilter);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция AdminCreateAclsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, AclBindings)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminCreateAcls(Admin, AclBindings);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция AdminDeleteAclsНаСервере(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки, Admin, AclBindingFilters)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.AdminDeleteAcls(Admin, AclBindingFilters);
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция GetVersion(АдаптерПараметры, АдаптерКодОтвета, АдаптерОписаниеОшибки)
	
	Адаптер = Адаптер(АдаптерПараметры);
	
	Результат = Адаптер.GetVersion();
	
	АдаптерКодОтвета = Адаптер.КодОтвета;
	АдаптерОписаниеОшибки = Адаптер.ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеМоментаВремени(timestamp)
	
	КолвоСекунд = Цел(timestamp/1000);
	ОстатокМиллисекунд = timestamp - КолвоСекунд*1000;
	
	УниверсальноеВремя = '19700101' + КолвоСекунд;
	МестноеВремя = МестноеВремя(УниверсальноеВремя);
	
	Возврат Формат(МестноеВремя, "ДФ='yyyy-MM-dd HH:mm:ss'") + "." + Формат(ОстатокМиллисекунд, "ЧЦ=3; ЧН=; ЧВН=");
	
КонецФункции
