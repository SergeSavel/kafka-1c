
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВерсияПодсистемы = КафкаКлиентСервер.ВерсияПодсистемы();
	
	Кластер = Справочники.КафкаКластеры.ПоУмолчанию;
	
КонецПроцедуры

#Область Метаданные

&НаКлиенте
Процедура МетаданныеПолучить(Команда)
	
	МетаданныеРезультат = Неопределено;
	
	МетаданныеПолучитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура МетаданныеПолучитьНаСервере()
	
	Адаптер = РеквизитФормыВЗначение("Объект");
	Адаптер.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
	
	Если ПустаяСтрока(МетаданныеТема) Тогда
		Результат = Адаптер.GetMetadata();
	Иначе
		Результат = Адаптер.GetTopicMetadata(МетаданныеТема);
	КонецЕсли;
	МетаданныеРезультат = СтрокаJSON(Результат);
	
	ЗначениеВРеквизитФормы(Адаптер, "Объект");
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиБрокера

&НаКлиенте
Процедура НастройкиБрокераПолучить(Команда)
	
	НастройкиБрокераТаблица.Очистить();
	
	НастройкиБрокераПолучитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НастройкиБрокераПолучитьНаСервере()
	
	НастройкиБрокераТаблица.Очистить();
		
	Адаптер = РеквизитФормыВЗначение("Объект");
	Адаптер.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
		
	Результат = Адаптер.GetBrokerConfig(НастройкиБрокераБрокер);
	
	ЗначениеВРеквизитФормы(Адаптер, "Объект");
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КЗ Из Результат Цикл
		Если НРег(КЗ.Ключ) = "entries" Тогда
			Entries = КЗ.Значение;
			Для Каждого КЗ2 Из Entries Цикл
				С = НастройкиБрокераТаблица.Добавить();
				С.Name = КЗ2.Ключ;
				Для Каждого КЗ3 Из КЗ2.Значение Цикл
					Если НРег(КЗ3.Ключ) = "value" Тогда
						С.Value = КЗ3.Значение;
					ИначеЕсли НРег(КЗ3.Ключ) = "isdefault" Тогда
						С.IsDefault = КЗ3.Значение;
					ИначеЕсли НРег(КЗ3.Ключ) = "isreadonly" Тогда
						С.IsReadOnly = КЗ3.Значение;
					ИначеЕсли НРег(КЗ3.Ключ) = "issensitive" Тогда
						С.IsSensitive = КЗ3.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиБрокераТолькоИзмененные(Команда)

	Элементы.НастройкиБрокераТолькоИзмененные.Пометка = Не Элементы.НастройкиБрокераТолькоИзмененные.Пометка;
	
	Если Элементы.НастройкиБрокераТолькоИзмененные.Пометка Тогда
		Элементы.НастройкиБрокераТаблица.ОтборСтрок = Новый ФиксированнаяСтруктура("IsDefault", Ложь);
	Иначе
		Элементы.НастройкиБрокераТаблица.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиТемы

&НаКлиенте
Процедура НастройкиТемыПолучить(Команда)
	
	НастройкиТемыТаблица.Очистить();
	
	НастройкиТемыПолучитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НастройкиТемыПолучитьНаСервере()

	НастройкиТемыТаблица.Очистить();
	
	Если ПустаяСтрока(НастройкиТемыТема) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Поле = "НастройкиТемыТема";
		Сообщение.Текст = "Необходимо заполнить тему.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Адаптер = РеквизитФормыВЗначение("Объект");
	Адаптер.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
		
	Результат = Адаптер.GetTopicConfig(НастройкиТемыТема);
	
	ЗначениеВРеквизитФормы(Адаптер, "Объект");
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КЗ Из Результат Цикл
		Если НРег(КЗ.Ключ) = "entries" Тогда
			Entries = КЗ.Значение;
			Для Каждого КЗ2 Из Entries Цикл
				С = НастройкиТемыТаблица.Добавить();
				С.Name = КЗ2.Ключ;
				Для Каждого КЗ3 Из КЗ2.Значение Цикл
					Если НРег(КЗ3.Ключ) = "value" Тогда
						С.Value = КЗ3.Значение;
					ИначеЕсли НРег(КЗ3.Ключ) = "isdefault" Тогда
						С.IsDefault = КЗ3.Значение;
					ИначеЕсли НРег(КЗ3.Ключ) = "isreadonly" Тогда
						С.IsReadOnly = КЗ3.Значение;
					ИначеЕсли НРег(КЗ3.Ключ) = "issensitive" Тогда
						С.IsSensitive = КЗ3.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТемыТолькоИзмененные(Команда)

	Элементы.НастройкиТемыТолькоИзмененные.Пометка = Не Элементы.НастройкиТемыТолькоИзмененные.Пометка;
	
	Если Элементы.НастройкиТемыТолькоИзмененные.Пометка Тогда
		Элементы.НастройкиТемыТаблица.ОтборСтрок = Новый ФиксированнаяСтруктура("IsDefault", Ложь);
	Иначе
		Элементы.НастройкиТемыТаблица.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СоздатьТему

&НаКлиенте
Процедура СоздатьТему(Команда)
	
	СоздатьТемуРезультат = Неопределено;
	
	СоздатьТемуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТемуНаСервере()
	
	Если ПустаяСтрока(СоздатьТемуТема) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Поле = "СоздатьТемуТема";
		Сообщение.Текст = "Необходимо заполнить тему.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Адаптер = РеквизитФормыВЗначение("Объект");
	Адаптер.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
	
	Если ЗначениеЗаполнено(СоздатьТемуКоличествоРазделов) Тогда
		_КоличествоРазделов = СоздатьТемуКоличествоРазделов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоздатьТемуКоэффициентРепликации) Тогда
		_КоэффициентРепликации = СоздатьТемуКоэффициентРепликации;
	КонецЕсли;
	
	Результат = Адаптер.CreateTopic(СоздатьТемуТема, _КоличествоРазделов, _КоэффициентРепликации);
	
	ЗначениеВРеквизитФормы(Адаптер, "Объект");
		
	СоздатьТемуРезультат = СтрокаJSON(Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПозицииТемы

&НаКлиенте
Процедура ПозицииТемыПолучить(Команда)
	
	ПозицииТемыТаблица.Очистить();
	
	ПозицииТемыПолучитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПозицииТемыПолучитьНаСервере()
	
	ПозицииТемыТаблица.Очистить();
	
	Если ПустаяСтрока(ПозицииТемыТема) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Поле = "ПозицииТемыТема";
		Сообщение.Текст = "Необходимо заполнить тему.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Адаптер = РеквизитФормыВЗначение("Объект");
	Адаптер.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
	
	Таймаут = ?(ПозицииТемыТаймаут=0, Неопределено, ПозицииТемыТаймаут);
	
	Результат = Адаптер.ПолучитьСмещенияТемы(ПозицииТемыТема, Таймаут);
	
	ЗначениеВРеквизитФормы(Адаптер, "Объект");
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого PartitionOffsets Из Результат Цикл
		
		С = ПозицииТемыТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(С, PartitionOffsets);
		
	КонецЦикла;
				
КонецПроцедуры

#КонецОбласти

#Область ПолучитьСообщения

&НаКлиенте
Процедура ПолучениеСообщенийПолучить(Команда)
	
	ПолучениеСообщенийРезультат = Неопределено;
	
	ПолучениеСообщенийПолучитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПолучениеСообщенийПолучитьНаСервере()

	Если ПустаяСтрока(ПолучениеСообщенийТема) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Поле = "ПолучениеСообщенийТема";
		Сообщение.Текст = "Необходимо заполнить тему.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ПолучениеСообщенийКоличество = 0 Тогда
		ПолучениеСообщенийКоличество = 1;
	КонецЕсли;
	
	Адаптер = РеквизитФормыВЗначение("Объект");
	Адаптер.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
	
	ConsumerConfig = Новый Соответствие;
	ConsumerConfig.Вставить("enable.partition.eof", "true");
	
	Получатель = Адаптер.CreateConsumer(300000, ConsumerConfig);
	Если Получатель <> Неопределено Тогда
		Попытка
			
			TopicPartitionOffset = Новый Структура("Topic, Partition, Offset", ПолучениеСообщенийТема, ПолучениеСообщенийРаздел, ПолучениеСообщенийСмещение);
			Результат = ПолучениеСообщенийПолучитьНаСервере_(Адаптер, Получатель, TopicPartitionOffset, ПолучениеСообщенийКоличество);
			
			Адаптер.ReleaseConsumer(Получатель.Id);
			
		Исключение
			Адаптер.ReleaseConsumer(Получатель.Id);
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;		
		
	ЗначениеВРеквизитФормы(Адаптер, "Объект");
	
	ПолучениеСообщенийРезультат = СтрокаJSON(Результат);
	
	Если СтрДлина(ПолучениеСообщенийРезультат) > 4000000 Тогда
		ПолучениеСообщенийРезультат = "<< Слишком большой объем данных. >>";
	КонецЕсли;
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ПолучениеСообщенийПолучитьНаСервере_(Адаптер, Получатель, TopicPartitionOffset, Количество)
	
	Назначение = Адаптер.AssignConsumer(Получатель.Id, TopicPartitionOffset);
	Если Назначение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСообщения = Новый Массив;
	Для Счетчик = 1 По Количество Цикл
		Результат = Адаптер.Consume(Получатель.Id, 30000);
		Если Результат = Неопределено Тогда
			Возврат Неопределено;
		ИначеЕсли Результат = Null Тогда
			Прервать;
		КонецЕсли;
		МассивСообщения.Добавить(Результат);
	КонецЦикла;
	
	Возврат МассивСообщения;
	
КонецФункции

#КонецОбласти

#Область Прокси

&НаКлиенте
Процедура ПроксиПолучитьОписание(Команда)
	
	ПроксиРезультат = Неопределено;
	
	ПроксиПолучитьОписаниеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроксиПолучитьОписаниеНаСервере()
	
	Адаптер = РеквизитФормыВЗначение("Объект");
	Адаптер.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
	
	Результат = Адаптер.GetProxyInfo();
	
	ЗначениеВРеквизитФормы(Адаптер, "Объект");
	
	ПроксиРезультат = СтрокаJSON(Результат);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроксиПолучитьСостояние(Команда)
	
	ПроксиРезультат = Неопределено;
	
	ПроксиПолучитьСостояниеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроксиПолучитьСостояниеНаСервере()
	
	Адаптер = РеквизитФормыВЗначение("Объект");
	Адаптер.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
	
	Результат = Адаптер.GetProxyHealth();
	
	ЗначениеВРеквизитФормы(Адаптер, "Объект");
	
	ПроксиРезультат = СтрокаJSON(Результат);
		
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеФункции

&НаСервереБезКонтекста
Функция СтрокаJSON(Значение)
		
	Если Значение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	Если ЗначениеТип = Тип("Строка") Тогда
		Возврат Значение;
	КонецЕсли;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, "  ");

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Значение);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти
