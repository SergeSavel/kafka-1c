#Область Выгрузка

Процедура ВыгрузитьРегламент(Шина) Экспорт
	
	Если КафкаПовтИсп.ЭтоБэкап() И Не КафкаПереопределяемый.РазрешенОбменБэкапов() Тогда
		ТекстСообщения = "Обмен бэкапов запрещен. Выгрузка не будет запущена.";
		КафкаКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации("Обмен данными.Кафка."+Шина.Наименование, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
		Возврат;
	КонецЕсли;
		
	Выгрузить(Шина);
	
КонецПроцедуры

Процедура Выгрузить(Шина) Экспорт
	
	Если Не ЗначениеЗаполнено(Шина) Тогда
		ВызватьИсключение "Не заполнена шина. Выгрузка невозможна.";
	КонецЕсли;
	
	ШинаИнфо = ШинаИнфо(Шина);
		
	Если Не ЗначениеЗаполнено(ШинаИнфо.Узел) Тогда
		ВызватьИсключение "Не заполнен узел шины. Выгрузка невозможна.";
	КонецЕсли;
	
	Параллелизм = ИнициализироватьПараллелизм(ШинаИнфо.ОбменКоличествоПотоков);
	
	Изменения = ПолучитьИзменения(ШинаИнфо.Узел, ШинаИнфо.ОтправкаБлокироватьТаблицуРегистрации);
	Если Изменения.Количество() > 0 Тогда
	
		Обработка = КафкаПереопределяемый.ПолучитьОбработку(ШинаИнфо);
		
		// Установим реквизиты обработки.
		ПотенциальныеРеквизитыОбработки = Новый Структура;
		ПотенциальныеРеквизитыОбработки.Вставить("Узел", ШинаИнфо.Узел);
		ПотенциальныеРеквизитыОбработки.Вставить("Шина", ШинаИнфо.Ссылка);
		УстановитьРеквизитыОбработки(Обработка, ПотенциальныеРеквизитыОбработки);
		
		Заголовки = Новый Соответствие;
		
		// Проверка разрешений на выгрузку для текущего узла.
		Если Обработка.ПередВыгрузкойУзла(Заголовки) Тогда
		
			// Инициализируем API Кафки.
			Кафка = КафкаКлиентСервер.Адаптер(ШинаИнфо.Кластер);
			
			// Создадим экземпляр отправителя внутри прокси.
			ProducerConfig = КонфигурацияШины(ШинаИнфо.Ссылка);
			Producer = Кафка.ProducerCreate(ШинаИнфо.Наименование, ProducerConfig, ШинаИнфо.КлиентТаймаут);
			Если Producer = Неопределено Тогда
				ВызватьИсключение Кафка.ОписаниеОшибки;
			КонецЕсли;
						
			// Конструкция, гарантирующая удаление экземпляра отправителя независимо от того, чем завершится отправка.
			Попытка
				
				ВыгружаемыеТаблицы = Обработка.ВыгружаемыеТаблицы();
				
				ПредПорядок = Неопределено;
				
				Для Каждого ВыгружаемаяТаблица Из ВыгружаемыеТаблицы Цикл
							
					РезультатЗапросаИзменения = Изменения.Получить(ВыгружаемаяТаблица.ПолноеИмя);
					Если РезультатЗапросаИзменения = Неопределено Или РезультатЗапросаИзменения.Пустой() Тогда
						Продолжить; // нечего выгружать по текущей таблице
					КонецЕсли;
					
					// Перед началом выгрузки данных нового порядка дожидаемся завершения выгрузки данных старого порядка.
					Если ПредПорядок <> ВыгружаемаяТаблица.Порядок Тогда
						ДождатьсяОсвобожденияПулаПотоков(Параллелизм, Истина);
					КонецЕсли;
					
					ПредПорядок = ВыгружаемаяТаблица.Порядок;
								
					ВыгрузитьТаблицу(ШинаИнфо, Обработка, Producer, ВыгружаемаяТаблица, РезультатЗапросаИзменения, Заголовки, Параллелизм);
							
				КонецЦикла;
					
				ДождатьсяОсвобожденияПулаПотоков(Параллелизм, Истина);
				
				Кафка.ProducerRelease(Producer.Id, Producer.Token);
				
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				Кафка.ProducerRelease(Producer.Id, Producer.Token);
				
			КонецПопытки;
			
			Если ИнформацияОбОшибке = Неопределено Тогда
				Обработка.ПослеВыгрузкиУзла();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Отправка метрик в Заббикс.
	Если ШинаИнфо.МониторингВключен Тогда
		
		ПараметрыМониторинга = ПараметрыМониторинга(ШинаИнфо.Кластер);
		
		Если ПараметрыМониторинга.Включен
		И Не ПустаяСтрока(ПараметрыМониторинга.ZabbixКомандаZabbixSender)
		И Не ПустаяСтрока(ПараметрыМониторинга.ZabbixКлючМетаданныеОчередьВыгрузки)
		Тогда
			ZabbixВыгрузитьМетрикуОбъектовВыгружено(ШинаИнфо, ПараметрыМониторинга.ZabbixКомандаZabbixSender, Параллелизм.ОбъектыСчетчик);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ТекстОшибки = "Выгрузка данных в шину """+ШинаИнфо.Наименование+""" завершилась ошибкой.
		|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьИзменения(Узел, Блокировать=Ложь)
		
	МассивТекстЗапроса = Новый Массив;
	МассивИменаТаблиц  = Новый Массив;
	
	СоставТаблиц = Узел.Метаданные().Состав;
	
	Если Блокировать Тогда
		Блокировка = Новый БлокировкаДанных;
	КонецЕсли;
	
	Для Каждого ЭлементСостава Из СоставТаблиц Цикл
		ТаблицаИнфо = КафкаПовтИсп.ОписаниеТаблицы(ЭлементСостава.Метаданные.ПолноеИмя());
		
		Если ТаблицаИнфо.ЭтоКонстанта Тогда
			МассивТекстЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 999999999
			|	ИСТИНА
			|ИЗ
			|	" + ТаблицаИнфо.ПолноеИмя + ".Изменения
			|ГДЕ
			|	Узел = &Узел"); 
		ИначеЕсли ТаблицаИнфо.ЭтоСсылочныйОбъект Тогда
			МассивТекстЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 999999999
			|	Изменения.Ссылка,
			|	ВЫБОР
			|		КОГДА ОсновнаяТаблица.Ссылка ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоУдаление
			|ИЗ
			|	" + ТаблицаИнфо.ПолноеИмя + ".Изменения КАК Изменения
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТаблицаИнфо.ПолноеИмя + " КАК ОсновнаяТаблица
			|		ПО Изменения.Ссылка = ОсновнаяТаблица.Ссылка
			|ГДЕ
			|	Изменения.Узел = &Узел"); 
		Иначе
			СтрокаИзмерения = ?(ТаблицаИнфо.КлючевыеПоля.Количество()=0, "ИСТИНА", СтрСоединить(ТаблицаИнфо.КлючевыеПоля, ","));
			МассивТекстЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 999999999
			|	" + СтрокаИзмерения + "
			|ИЗ
			|	" + ТаблицаИнфо.ПолноеИмя + ".Изменения
			|ГДЕ
			|	Узел = &Узел");
		КонецЕсли;
		
		МассивИменаТаблиц.Добавить(ТаблицаИнфо.ПолноеИмя);
		
		Если Блокировать Тогда
			ЭлементБлокировки = Блокировка.Добавить(ТаблицаИнфо.ПолноеИмя+?(ТаблицаИнфо.ЭтоПодчиненныйРегистр Или ТаблицаИнфо.ЭтоПоследовательность, ".НаборЗаписей", ""));
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(МассивТекстЗапроса, Символы.ПС+";"+Символы.ПС);
	Запрос.УстановитьПараметр("Узел", Узел);
	
	Если Блокировать Тогда
		
		КоличествоПопыток = 10;
		Пока Истина Цикл
			КоличествоПопыток = КоличествоПопыток - 1;
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка.Заблокировать();
				
				МассивРезультаты = Запрос.ВыполнитьПакет();
				
				ЗафиксироватьТранзакцию();
				
				Прервать;
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
							
				ОтменитьТранзакцию();
				
				Если КоличествоПопыток > 0 Тогда
					ОписаниеОшибки = КафкаКлиентСервер.КорневаяИнформацияОбОшибке(ИнформацияОбОшибке).Описание;
					ОписаниеОшибкиНРег = НРег(ОписаниеОшибки);
					Если Найти(ОписаниеОшибкиНРег, "блокиров")>0 Или Найти(ОписаниеОшибкиНРег, "lock")>0 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
					
				ВызватьИсключение;
			КонецПопытки
		КонецЦикла;
		
	Иначе
		
		МассивРезультаты = Запрос.ВыполнитьПакет();
		
	КонецЕсли;
		
	Результат = Новый Соответствие;
	Для индекс = 0 По МассивИменаТаблиц.ВГраница() Цикл
		ИмяТаблицы = МассивИменаТаблиц[индекс];
		РезультатЗапроса = МассивРезультаты[индекс];
		Результат.Вставить(ИмяТаблицы, РезультатЗапроса);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыгрузитьТаблицу(ШинаИнфо, Обработка, Producer, Таблица, РезультатЗапросаИзменения, ОбщиеЗаголовки, Параллелизм)
	
	Если ЗначениеЗаполнено(Таблица.РазмерПакета) Тогда
		РазмерПакета = Таблица.РазмерПакета;
	Иначе
		РазмерПакета = 250;
	КонецЕсли;
	
	// Скопируем общие заголовки.
	Заголовки = Новый Соответствие;
	Для Каждого КЗ Из ОбщиеЗаголовки Цикл
		Заголовки.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	ТаблицаИнфо = КафкаПовтИсп.ОписаниеТаблицы(Таблица.ПолноеИмя);
	
	Если Не Обработка.ПередВыгрузкойТаблицы(ТаблицаИнфо, Заголовки) Тогда
		Возврат;
	КонецЕсли;
								
	ИзмененияВыборка = РезультатЗапросаИзменения.Выбрать();
	
	ЗаписьЖурналаРегистрации("Обмен данными.Кафка."+ШинаИнфо.Наименование,
			УровеньЖурналаРегистрации.Примечание, ШинаИнфо.Узел.Метаданные(), ШинаИнфо.Узел,
			"Начата асинхронная отправка "+ИзмененияВыборка.Количество()+" объектов таблицы '"+Таблица.ПолноеИмя+"'.");
			
	ТекущийПакет = Неопределено;
						
	// Обходим все измененные/удаленные объекты.
	Пока ИзмененияВыборка.Следующий() Цикл
		
		Если ТекущийПакет = Неопределено Тогда
			
			Данные = Новый ТаблицаЗначений;
			Для Каждого Колонка Из РезультатЗапросаИзменения.Колонки Цикл
				Данные.Колонки.Добавить(Колонка.Имя);
			КонецЦикла;
			
			ТекущийПакет = Новый Структура("ТаблицаИнфо, Заголовки, Данные, Размер", ТаблицаИнфо, Заголовки, Данные, 0);
						
		КонецЕсли;					
				
		ЗаполнитьЗначенияСвойств(ТекущийПакет.Данные.Добавить(), ИзмененияВыборка);
		ТекущийПакет.Размер = ТекущийПакет.Размер + 1;
		
		Если ТекущийПакет.Размер >= Таблица.РазмерПакета Тогда
			ВыгрузитьПакет(ШинаИнфо, Обработка, Producer, Параллелизм, ТекущийПакет, Таблица.ПакетныйРежим);
			ТекущийПакет = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущийПакет <> Неопределено Тогда
		ВыгрузитьПакет(ШинаИнфо, Обработка, Producer, Параллелизм, ТекущийПакет, Таблица.ПакетныйРежим);
		ТекущийПакет = Неопределено;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Обмен данными.Кафка."+ШинаИнфо.Наименование,
			УровеньЖурналаРегистрации.Примечание, ШинаИнфо.Узел.Метаданные(), ШинаИнфо.Узел,
			"Завершена асинхронная отправка "+ИзмененияВыборка.Количество()+" объектов таблицы '"+Таблица.ПолноеИмя+"'.");
	
КонецПроцедуры

Процедура ВыгрузитьПакет(ШинаИнфо, Обработка, Producer, Параллелизм, Пакет, Группировать)
	
	ДождатьсяОсвобожденияПулаПотоков(Параллелизм);	
		
	Если Параллелизм.МаксСтепень < 2 Тогда
		// Выгрузим пакет в этом же сеансе.
		
		ВыгрузитьПакетЭтотСеанс(ШинаИнфо, Обработка, Producer.Id, Producer.Token, Пакет, Группировать);
		
		Параллелизм.ОбъектыСчетчик = Параллелизм.ОбъектыСчетчик + Пакет.Размер;
		
    Иначе
		// Выгрузим пакет в отдельном фоновом сеансе.
		
		Параллелизм.ПотокиСчетчик = Параллелизм.ПотокиСчетчик + 1;
		
		ПараметрыФЗ = Новый Массив;
		ПараметрыФЗ.Добавить(ШинаИнфо);
		ПараметрыФЗ.Добавить(Producer.Id);
		ПараметрыФЗ.Добавить(Producer.Token);
		ПараметрыФЗ.Добавить(Пакет);
		ПараметрыФЗ.Добавить(Группировать);
		
		ФЗ = ФоновыеЗадания.Выполнить("КафкаСервер.ВыгрузитьПакетОтдельныйСеанс", ПараметрыФЗ, ,
				"Поток выгрузки данных в шину '"+ШинаИнфо.Наименование+"' № "+Параллелизм.ПотокиСчетчик);
				
		Параллелизм.Потоки.Добавить(ФЗ);
		Параллелизм.ПотокиРазмеры.Вставить(ФЗ.УникальныйИдентификатор, Пакет.Размер);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыгрузитьПакетОтдельныйСеанс(ШинаИнфо, ProducerId, ProducerToken, Пакет, Группировать) Экспорт
	
	Обработка = КафкаПереопределяемый.ПолучитьОбработку(ШинаИнфо);
	
	// Установим реквизиты обработки.
	ПотенциальныеРеквизитыОбработки = Новый Структура;
	ПотенциальныеРеквизитыОбработки.Вставить("Узел", ШинаИнфо.Узел);
	ПотенциальныеРеквизитыОбработки.Вставить("Шина", ШинаИнфо.Ссылка);
	УстановитьРеквизитыОбработки(Обработка, ПотенциальныеРеквизитыОбработки);
	
	ВыгрузитьПакетЭтотСеанс(ШинаИнфо, Обработка, ProducerId, ProducerToken, Пакет, Группировать);
	
КонецПроцедуры

Процедура ВыгрузитьПакетЭтотСеанс(ШинаИнфо, Обработка, ProducerId, ProducerToken, Пакет, Группировать)
	
	Если Группировать Тогда
		
		ВыгрузитьПакетПакетно(ШинаИнфо, Обработка, ProducerId, ProducerToken, Пакет);
		
	Иначе
		
		ВыгрузитьПакетПообъектно(ШинаИнфо, Обработка, ProducerId, ProducerToken, Пакет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьПакетПообъектно(ШинаИнфо, Обработка, ProducerId, ProducerToken, Пакет)
	
	// Инициализируем соединение с Кафкой.
	Кафка = КафкаКлиентСервер.Адаптер(ШинаИнфо.Кластер);
	
	Обработка.ПередВыгрузкойПакета(Кафка);
			
	ТаблицаИнфо = Пакет.ТаблицаИнфо;
	ОбщиеЗаголовки = Пакет.Заголовки;
	
	Для Каждого СтрокаПакета Из Пакет.Данные Цикл
		
		// Скопируем общие заголовки.
		Заголовки = Новый Соответствие;
		Для Каждого КЗ Из ОбщиеЗаголовки Цикл
			Заголовки.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
		
		// Итерацию выгрузки каждого объекта выполняем в отдельной транзакции.
		// Внутри транзакции только необходимый минимум действий.
		НачатьТранзакцию();
		
		Попытка
		
			// Устанавливаем разделяемую блокировку 
			ПространствоБлокировки = ТаблицаИнфо.ПолноеИмя;
			Если ТаблицаИнфо.ЭтоПодчиненныйРегистр Или ТаблицаИнфо.ЭтоПоследовательность Тогда
				ПространствоБлокировки = ПространствоБлокировки + ".НаборЗаписей";
			КонецЕсли;
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПространствоБлокировки);
			Для Каждого Поле Из ТаблицаИнфо.КлючевыеПоля Цикл
				ЭлементБлокировки.УстановитьЗначение(Поле, СтрокаПакета[Поле]);
			КонецЦикла;
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
			// Читаем объект.
			Если ТаблицаИнфо.ЭтоКонстанта Тогда
				
				Объект = Константы[ТаблицаИнфо.Имя].СоздатьМенеджерЗначения();
				Объект.Прочитать();
			
			ИначеЕсли ТаблицаИнфо.ЭтоСсылочныйОбъект Тогда
				
				Если СтрокаПакета.ЭтоУдаление Тогда
					Объект = Новый УдалениеОбъекта(СтрокаПакета.Ссылка);
				Иначе // Это обычное изменение
					Объект = СтрокаПакета.Ссылка.ПолучитьОбъект();
				КонецЕсли;
					
			Иначе // Это регистр или последовательность
			
				РегистрМенеджер = КафкаПовтИсп.МенеджерТаблицы(ТаблицаИнфо.ПолноеИмя);
				
				Объект = РегистрМенеджер.СоздатьНаборЗаписей();
				Для Каждого Поле Из ТаблицаИнфо.КлючевыеПоля Цикл
					Объект.Отбор[Поле].Установить(СтрокаПакета[Поле]);
				КонецЦикла;
				Объект.Прочитать();
				
			КонецЕсли;
						
			// Разрегистрируем объект.
			ПланыОбмена.УдалитьРегистрациюИзменений(ШинаИнфо.Узел, Объект);
			
			ВыгружатьОбъект = Обработка.ПередВыгрузкойОбъекта(Объект, ТаблицаИнфо, Заголовки);
			Если ВыгружатьОбъект Тогда
			
				// Сериализуем объект
				СхемаЗначения = Неопределено; // Для бинарной сериализации.
				Значение = Обработка.СообщениеЗначение(Объект, ТаблицаИнфо, Заголовки, СхемаЗначения);
				
				// Ключ сообщения нужен для правильного распределения сообщений по разделам (партициям).
				// Сообщения с одинаковым ключом будут прочитаны в том же порядке, в котором были отправлены.
				СхемаКлюча = Неопределено; // Для бинарной сериализации.
				Ключ = Обработка.СообщениеКлюч(Объект, ТаблицаИнфо, Заголовки, СхемаКлюча);
				
				Если ШинаИнфо.ТемаЭтоПрефикс Тогда
					ТемаСуффикс = Обработка.СообщениеСуффиксТемы(Объект, ТаблицаИнфо, Заголовки);
					Если Не ЗначениеЗаполнено(ТемаСуффикс) Тогда
						ВызватьИсключение "Не заполнен суффикс темы.";
					КонецЕсли;
					Тема = ШинаИнфо.ТемаПрефикс + ТемаСуффикс;
				Иначе
					Тема = ШинаИнфо.Тема;
				КонецЕсли;
				
				// Отправляем данные. Это должно быть самое последнее действие в транзакции.
				DeliveryResult = Кафка.ProducerProduce(
						ProducerId, ProducerToken, Тема, , Значение, Ключ, Заголовки, СхемаЗначения, СхемаКлюча);
				Если DeliveryResult = Неопределено Тогда
					ВызватьИсключение Кафка.ОписаниеОшибки;
				ИначеЕсли DeliveryResult.Status <> "Persisted" Тогда
					ВызватьИсключение "Не удалось отправить сообщение. Статус доставки: '"+DeliveryResult.Status+"'."; // TODO: Более подробная причина.
				КонецЕсли;
									
			КонецЕсли;
						
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ОтменитьТранзакцию();
			
			ВызватьИсключение
			"Не удалось выполнить отправку объекта "+ПредставлениеОбъекта(Объект, ТаблицаИнфо)+".
			|"+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
		КонецПопытки;
		
		Если ВыгружатьОбъект Тогда
			Обработка.ПослеВыгрузкиОбъекта(Объект, ТаблицаИнфо, DeliveryResult);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ВыгрузитьПакетПакетно(ШинаИнфо, Обработка, ProducerId, ProducerToken, Пакет)
	
	// Инициализируем соединение с Кафкой.
	Кафка = КафкаКлиентСервер.Адаптер(ШинаИнфо.Кластер);
	
	Обработка.ПередВыгрузкойПакета(Кафка);
				
	ТаблицаИнфо = Пакет.ТаблицаИнфо;
	ОбщиеЗаголовки = Пакет.Заголовки;
	
	// Скопируем общие заголовки.
	Заголовки = Новый Структура;
	Для Каждого КЗ Из Пакет.Заголовки Цикл
		Заголовки.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	НачатьТранзакцию();
	
	// Устанавливаем разделяемую блокировку 
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ТаблицаИнфо.ПолноеИмя+?(ТаблицаИнфо.ЭтоПодчиненныйРегистр Или ТаблицаИнфо.ЭтоПоследовательность, ".НаборЗаписей", ""));
	ЭлементБлокировки.ИсточникДанных = Пакет.Данные;
	Для Каждого Поле Из ТаблицаИнфо.КлючевыеПоля Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(Поле, Поле);
	КонецЦикла;
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	
	МассивОбъектов = Новый Массив;
	
	Для Каждого СтрокаПакета Из Пакет.Данные Цикл
								
		// Читаем объект.
		Если ТаблицаИнфо.ЭтоКонстанта Тогда
			
			Объект = Константы[ТаблицаИнфо.Имя].СоздатьМенеджерЗначения();
			Объект.Прочитать();
		
		ИначеЕсли ТаблицаИнфо.ЭтоСсылочныйОбъект Тогда
			
			Если СтрокаПакета.ЭтоУдаление Тогда
				Объект = Новый УдалениеОбъекта(СтрокаПакета.Ссылка);
			Иначе // Это обычное изменение
				Объект = СтрокаПакета.Ссылка.ПолучитьОбъект();
			КонецЕсли;
				
		Иначе // Это регистр или последовательность
		
			РегистрМенеджер = КафкаПовтИсп.МенеджерТаблицы(ТаблицаИнфо.ПолноеИмя);
			
			Объект = РегистрМенеджер.СоздатьНаборЗаписей();
			Для Каждого Поле Из ТаблицаИнфо.КлючевыеПоля Цикл
				Объект.Отбор[Поле].Установить(СтрокаПакета[Поле]);
			КонецЦикла;
			Объект.Прочитать();
			
		КонецЕсли;
					
		// Разрегистрируем объект.
		ПланыОбмена.УдалитьРегистрациюИзменений(ШинаИнфо.Узел, Объект);
		
		ВыгружатьОбъект = Обработка.ПередВыгрузкойОбъекта(Объект, ТаблицаИнфо, Заголовки);
		
		Если ВыгружатьОбъект Тогда
			МассивОбъектов.Добавить(Объект);
		КонецЕсли;
			
	КонецЦикла;
	
	Если МассивОбъектов.Количество() > 0 Тогда
	
		// Сериализуем объект
		СхемаЗначения = Неопределено; // Для бинарной сериализации.
		Значение = Обработка.СериализоватьПакет(МассивОбъектов, ТаблицаИнфо, Заголовки, СхемаЗначения);
		
		СхемаКлюча = Неопределено; // Для бинарной сериализации.
		Ключ = Обработка.КлючПакета(МассивОбъектов, ТаблицаИнфо, СхемаКлюча);
						
		// Отправляем данные. Это должно быть самое последнее действие в транзакции.
		DeliveryResult = Кафка.ProducerProduce(ProducerId, ProducerToken, ШинаИнфо.Тема, , Значение, Ключ, Заголовки, СхемаЗначения, СхемаКлюча);
		Если DeliveryResult = Неопределено Тогда
			ОтменитьТранзакцию();
			ВызватьИсключение Кафка.ОписаниеОшибки;
		ИначеЕсли DeliveryResult.Status <> "Persisted" Тогда
			ОтменитьТранзакцию();
			ВызватьИсключение "Не удалось отправить сообщение. Статус доставки: '"+DeliveryResult.Status+"'."; // TODO: Более подробная причина.
		КонецЕсли;
		
	КонецЕсли;
		
	ЗафиксироватьТранзакцию();
		
	Если МассивОбъектов.Количество() > 0 Тогда
		Обработка.ПослеВыгрузкиПакета(МассивОбъектов, ТаблицаИнфо, DeliveryResult);
	КонецЕсли;
	
КонецПроцедуры

#Область ВыгрузкаВспомогательныеФункции

Функция ИнициализироватьПараллелизм(МаксСтепень)
		
	Результат = Новый Структура;
	
	Результат.Вставить("МаксСтепень", МаксСтепень);
	Результат.Вставить("Потоки", Новый Массив);
	Результат.Вставить("ПотокиСчетчик", 0);
	Результат.Вставить("ПотокиРазмеры", Новый Соответствие);
	Результат.Вставить("ОбъектыСчетчик", 0);
	
	Если Результат.МаксСтепень < 1 Тогда
		Результат.МаксСтепень = 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДождатьсяОсвобожденияПулаПотоков(Параллелизм, ПолноеОсвобождение=Ложь)
	
	Если Не ПолноеОсвобождение И Параллелизм.Потоки.Количество()<Параллелизм.МаксСтепень Тогда
		Возврат;
	КонецЕсли;
	
	ЦелевоеКоличествоПотоков = ?(ПолноеОсвобождение, 0,	Параллелизм.МаксСтепень-1);
	
	Пока Параллелизм.Потоки.Количество() > ЦелевоеКоличествоПотоков Цикл
	
		Параллелизм.Потоки = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(Параллелизм.Потоки, 5);
			
		Колво = Параллелизм.Потоки.Количество();
		Индекс = Колво;
		Пока Индекс > 0 Цикл
			
			Индекс = Индекс - 1;
			ФЗ = Параллелизм.Потоки[Индекс];
			
			Если ФЗ.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
				
				Параллелизм.Потоки.Удалить(Индекс);
				
				Параллелизм.ОбъектыСчетчик = Параллелизм.ОбъектыСчетчик + Параллелизм.ПотокиРазмеры[ФЗ.УникальныйИдентификатор];
				Параллелизм.ПотокиРазмеры.Удалить(ФЗ.УникальныйИдентификатор);
				
			ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
				
				ОписаниеОшибки = "Один из потоков завершился ошибкой.";
				Если ФЗ.ИнформацияОбОшибке <> Неопределено Тогда
					ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ФЗ.ИнформацияОбОшибке);
				КонецЕсли;
				
				ВызватьИсключение ОписаниеОшибки;
				
			ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
				
				ВызватьИсключение "Один из потоков был вручную отменен.";
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОбъекта(Объект, ТаблицаИнфо)
	
	Результат = ТаблицаИнфо.ПолноеИмя;
	
	Если Объект <> Неопределено Тогда
		Если ТаблицаИнфо.ЭтоСсылочныйОбъект Тогда
			Результат = Результат+" ("""+Строка(Объект)+""")"
		ИначеЕсли ТаблицаИнфо.ЭтоПодчиненныйРегистр Тогда
			Результат = Результат+" ("+Строка(Объект.Отбор.Регистратор.Значение)+")"
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Загрузка

Процедура ЗагрузитьРегламент(Шина) Экспорт
	
	Если КафкаПовтИсп.ЭтоБэкап() И Не КафкаПереопределяемый.РазрешенОбменБэкапов() Тогда
		ТекстСообщения = "Обмен бэкапов запрещен. Загрузка не будет запущена.";
		КафкаКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации("Обмен данными.Кафка."+Шина, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Загрузить(Шина);
	
КонецПроцедуры

Процедура Загрузить(Шина) Экспорт
	
	МоментСтарта = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ШинаИнфо = ШинаИнфо(Шина);
	Если ШинаИнфо = Неопределено Тогда
		ВызватьИсключение "Некорректная шина.";
	КонецЕсли;
	
	Если ШинаИнфо.ОбменДлительностьСеанса <> 0 Тогда
		МоментЗавершения = МоментСтарта + ШинаИнфо.ОбменДлительностьСеанса;
	КонецЕсли;
	
	// Инициализируем API Кафки.
	Кафка = КафкаКлиентСервер.Адаптер(ШинаИнфо.Кластер);
	
	// Создаем экземпляр AdminClient для получения перечня читаемых разделов в соответствии с шаблоном темы.
	AdminClientConfig = КонфигурацияБазовая(ШинаИнфо.Кластер);
	AdminClient = Кафка.AdminCreate(ШинаИнфо.Наименование, AdminClientConfig, ШинаИнфо.КлиентТаймаут);
	Если AdminClient = Неопределено Тогда
		ВызватьИсключение Кафка.ОписаниеОшибки;
	КонецЕсли;
	
	Попытка
		
		// Формируем масив разделов, из которых будем читать сообщения.
		Partitions = ПолучитьЧитаемыеРазделы(Кафка, AdminClient, ШинаИнфо.Тема);
		
		Кафка.AdminRelease(AdminClient.Id, AdminClient.Token);
		
		Если Partitions.Количество() = 0 Тогда
			ВызватьИсключение "Не найдены темы Кафки, соответствующие предоставленному шаблону.";
		КонецЕсли;
		
	Исключение
		
		Кафка.AdminRelease(AdminClient.Id, AdminClient.Token);
		ВызватьИсключение;
		
	КонецПопытки;
	
	// Инициализируем массив потоков.
	КоличествоПотоков = Макс(ШинаИнфо.ОбменКоличествоПотоков, 1);
	КоличествоПотоков = Мин(КоличествоПотоков, Partitions.Количество());
	Потоки = Новый Массив;
	Для НомерПотока = 1 По КоличествоПотоков Цикл
		Поток = Новый Структура;
		Поток.Вставить("Номер", НомерПотока);
		Поток.Вставить("Partitions", Новый Массив);
		Потоки.Добавить(Поток);
	КонецЦикла;
	
	// Размазываем ровным слоем читаемые разделы по потокам.
	Индекс = 0;
	Для Каждого TopicPartition Из Partitions Цикл
		Поток = Потоки[Индекс];
		Поток.Partitions.Добавить(TopicPartition);
		Индекс = Индекс + 1;
		Если Индекс >= КоличествоПотоков Тогда
			Индекс = 0;
		КонецЕсли;
	КонецЦикла;
	
	// Инициализируем параметры получателя.
	ConsumerConfig = КонфигурацияШины(ШинаИнфо.Ссылка);
	Если ConsumerConfig.Получить("group.id") = Неопределено Тогда 
		ConsumerConfig.Вставить("group.id", КафкаПовтИсп.ГруппаПолучателей());
	КонецЕсли;
	ConsumerConfig.Вставить("enable.partition.eof", XMLСтрока(Не ШинаИнфо.ПриемВРеальномВремени));
	
	Если КоличествоПотоков > 1 Тогда
		
		// Определим идентификатор текущего фонового задания для того, чтобы в случае, если текущее задание
		// неожиданно завершится, дочерние задания смогли это определить, и также завершиться.
		ТекущийСеансИБ = ПолучитьТекущийСеансИнформационнойБазы();
		ТекущееФЗ = ТекущийСеансИБ.ПолучитьФоновоеЗадание();
		Если ТекущееФЗ <> Неопределено Тогда
			ИдентификаторТекущегоФЗ = ТекущееФЗ.УникальныйИдентификатор;
		Иначе
			ИдентификаторТекущегоФЗ = Неопределено;
		КонецЕсли;
		
		МассивЗаданий = Новый Массив;
		
		// Несколько потоков - запустим каждый в отдельном сеансе.
		Для Каждого Поток Из Потоки Цикл
						
			ЗаданиеПараметры = Новый Массив;
			ЗаданиеПараметры.Добавить(ШинаИнфо);
			ЗаданиеПараметры.Добавить(ConsumerConfig);
			ЗаданиеПараметры.Добавить(Поток);
			ЗаданиеПараметры.Добавить(МоментЗавершения);
			ЗаданиеПараметры.Добавить(ИдентификаторТекущегоФЗ);
			
			ЗаданиеКлюч = "КафкаСервер.ЗагрузитьРазделы-"
					+ Строка(ШинаИнфо.Ссылка.УникальныйИдентификатор()) + "-"
					+ Формат(Поток.Номер, "ЧЦ=3; ЧДЦ=0; ЧН=000");
					
			ЗаданиеНаименование = ШинаИнфо.Наименование+" ("+Поток.Номер+")";
					
			Задание = ФоновыеЗадания.Выполнить("КафкаСервер.ЗагрузитьРазделы", ЗаданиеПараметры, ЗаданиеКлюч, ЗаданиеНаименование);
			
			МассивЗаданий.Добавить(Задание);
			
		КонецЦикла;
		
		Ошибки = Новый Массив;
		
		Пока МассивЗаданий.Количество() > 0 Цикл
		
			МассивЗаданий = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивЗаданий, 5);
			
			Индекс = МассивЗаданий.Количество();
			Пока Индекс > 0 Цикл
				
				Индекс = Индекс - 1;
				Задание = МассивЗаданий[Индекс];
				
				Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					Продолжить;
				КонецЕсли;
				
				МассивЗаданий.Удалить(Индекс);
				
				Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
					Ошибки.Добавить(Задание.ИнформацияОбОшибке);
				ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
					ОписаниеОшибки = "Один из потоков был вручную отменен.";
					ЗаписьЖурналаРегистрации(
							"Обмен данными.Кафка."+ШинаИнфо.Наименование,
							УровеньЖурналаРегистрации.Предупреждение,
							ШинаИнфо.Ссылка.Метаданные(),
							ШинаИнфо.Ссылка,
							ОписаниеОшибки);
				КонецЕсли;
						
			КонецЦикла;
			
		КонецЦикла;
		
		Если Ошибки.Количество() > 0 Тогда
			МассивОписаниеОшибки = Новый Массив;
			МассивОписаниеОшибки.Добавить("Один или несколько потоков загрузки завершились ошибками.");
			Для Каждого ИнформацияОбОшибке Из Ошибки Цикл
				Если ИнформацияОбОшибке = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				МассивОписаниеОшибки.Добавить(Символы.ПС);
				МассивОписаниеОшибки.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецЦикла;
			ВызватьИсключение СтрСоединить(МассивОписаниеОшибки, Символы.ПС);
		КонецЕсли;
		
	Иначе
		
		// Один поток - запустим в текущем сеансе.
		Для Каждого Поток Из Потоки Цикл
			ЗагрузитьРазделы(ШинаИнфо, ConsumerConfig, Поток, МоментЗавершения);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьЧитаемыеРазделы(Кафка, AdminClient, Тема)
	
	Partitions = Новый Массив;
	
	Если СтрЗаканчиваетсяНа(Тема, "*") Тогда
		
		Md = Кафка.AdminGetMetadata(AdminClient.Id, AdminClient.Token);
		Если Md = Неопределено Тогда
			ВызватьИсключение Кафка.ОписаниеОшибки;
		КонецЕсли;
		
		ТемаПрефикс = Лев(Тема, СтрДлина(Тема)-1);
		
		Для Каждого TopicMd Из Md.Topics Цикл
			
			Если СтрНачинаетсяС(TopicMd.Topic, ТемаПрефикс) Тогда
				
				Для Каждого PartitionMd Из TopicMd.Partitions Цикл
					
					Partitions.Добавить(Новый Структура("Topic, Partition", TopicMd.Topic, PartitionMd.Partition));
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Md = Кафка.AdminGetMetadata(AdminClient.Id, AdminClient.Token, Тема);
		Если Md = Неопределено Тогда
			ВызватьИсключение Кафка.ОписаниеОшибки;
		КонецЕсли;
		
		Для Каждого TopicMd Из Md.Topics Цикл
			
			Для Каждого PartitionMd Из TopicMd.Partitions Цикл
				
				Partitions.Добавить(Новый Структура("Topic, Partition", TopicMd.Topic, PartitionMd.Partition));
				
			КонецЦикла;
				
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Partitions;
	
КонецФункции

Процедура ЗагрузитьРазделы(ШинаИнфо, ConsumerConfig, Параметры, МоментЗавершения, ИдентификаторРодительскогоФЗ=Неопределено) Экспорт
	
	// Инициализируем API Кафки.
	Кафка = КафкаКлиентСервер.Адаптер(ШинаИнфо.Кластер);
	
	// Инициализируем обработку загрузки данных.
	Обработка = КафкаПереопределяемый.ПолучитьОбработку(ШинаИнфо);
	Если Обработка = Неопределено Тогда
		ВызватьИсключение "Не удалось инициализировать обработку обмена для шины """+ШинаИнфо.Наименование+""".";
	КонецЕсли;
	
	// Установим реквизиты обработки.
	ПотенциальныеРеквизитыОбработки = Новый Структура;
	ПотенциальныеРеквизитыОбработки.Вставить("Узел", ШинаИнфо.Узел);
	ПотенциальныеРеквизитыОбработки.Вставить("Шина", ШинаИнфо.Ссылка);
	УстановитьРеквизитыОбработки(Обработка, ПотенциальныеРеквизитыОбработки);
	
	// Если по каким-то (или всем) разделам загрузка запрещена, удаляем разделы из массива.
	Индекс = Параметры.Partitions.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		TopicPartition = Параметры.Partitions[Индекс];
		Если Не Обработка.ПередЗагрузкойРаздела(TopicPartition.Topic, TopicPartition.Partition, Кафка) Тогда
			Параметры.Partitions.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектыСчетчик = 0;
	
	// Создаем экземпляр получателя внутри прокси, который будет читать сообщения для нас.
	Consumer = Кафка.ConsumerCreate(ШинаИнфо.Наименование+" ("+Параметры.Номер+")", ConsumerConfig, ШинаИнфо.КлиентТаймаут);
	Если Consumer = Неопределено Тогда
		ВызватьИсключение Кафка.ОписаниеОшибки;
	КонецЕсли;
	
	// Конструкция, гарантирующая удаление экземпляра получателя независимо от того, чем завершится чтение.
	Попытка
				
		Если Параметры.Partitions.Количество() > 0 Тогда
			ЗагрузитьРазделы_(ШинаИнфо, Обработка, Кафка, Consumer, Параметры.Partitions, МоментЗавершения, ОбъектыСчетчик, ИдентификаторРодительскогоФЗ);
		КонецЕсли;
		
		Кафка.ConsumerRelease(Consumer.Id, Consumer.Token);
		
	Исключение
		
		Кафка.ConsumerRelease(Consumer.Id, Consumer.Token);
		ВызватьИсключение;
		
	КонецПопытки;
	
	// Отправка метрик в Заббикс.
	Если ШинаИнфо.МониторингВключен Тогда
		
		ПараметрыМониторинга = ПараметрыМониторинга(ШинаИнфо.Кластер);
		
		Если ПараметрыМониторинга.Включен
		И Не ПустаяСтрока(ПараметрыМониторинга.ZabbixКомандаZabbixSender)
		И Не ПустаяСтрока(ПараметрыМониторинга.ZabbixКлючМетаданныеОчередьВыгрузки)
		Тогда
			ZabbixВыгрузитьМетрикуОбъектовЗагружено(ШинаИнфо, ПараметрыМониторинга.ZabbixКомандаZabbixSender, ОбъектыСчетчик);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРазделы_(ШинаИнфо, Обработка, Кафка, Consumer, Assignment, МоментЗавершения, ОбъектыСчетчик, ИдентификаторРодительскогоФЗ)
	
	ЕстьНовыеСообщения = Ложь;
	
	СостоянияЧтения = Новый Соответствие;
	
	Для Каждого TopicPartition Из Assignment Цикл
				
		// Получаем начальное и конечное смещения раздела.
		PartitionOffsets = Кафка.ConsumerQueryPartitionOffsets(Consumer.Id, Consumer.Token, TopicPartition.Topic, TopicPartition.Partition);
		Если PartitionOffsets = Неопределено Тогда
			ВызватьИсключение Кафка.ОписаниеОшибки;
		КонецЕсли;
		
		// Получаем последнюю зафиксированную позицию чтения.
		ТекущаяПозиция = РегистрыСведений.КафкаПозиции.ПолучитьПозицию(ШинаИнфо.Кластер, TopicPartition.Topic, TopicPartition.Partition);
		
		// Проверка корректности текущей позиции
		Если ТекущаяПозиция < PartitionOffsets.Low Тогда
			ЗаписьЖурналаРегистрации("Обмен данными.Кафка."+ШинаИнфо.Наименование,
					УровеньЖурналаРегистрации.Предупреждение, , TopicPartition.Topic+":"+Формат(TopicPartition.Partition, "ЧН=0; ЧГ=0"),
					"Начальная позиция раздела ("+Формат(PartitionOffsets.Low, "ЧН=0")+") больше текущей ("+Формат(ТекущаяПозиция, "ЧН=0")+"). Текущая позиция будет скорректирована.");
			ТекущаяПозиция = PartitionOffsets.Low;
		ИначеЕсли ТекущаяПозиция > PartitionOffsets.High Тогда
			ЗаписьЖурналаРегистрации("Обмен данными.Кафка."+ШинаИнфо.Наименование,
					УровеньЖурналаРегистрации.Предупреждение, , TopicPartition.Topic+":"+Формат(TopicPartition.Partition, "ЧН=0; ЧГ=0"),
					"Конечная позиция раздела ("+Формат(PartitionOffsets.High, "ЧН=0")+") меньше текущей ("+Формат(ТекущаяПозиция, "ЧН=0")+"). Текущая позиция будет скорректирована.");
			ТекущаяПозиция = PartitionOffsets.High;
		КонецЕсли;
		
		// Установим начальную позицию, с которой будут прочитаны сообщения раздела.
		TopicPartition.Вставить("Offset", ТекущаяПозиция);
		
		СостоянияЧтенияТопика = СостоянияЧтения.Получить(TopicPartition.Topic);
		Если СостоянияЧтенияТопика = Неопределено Тогда
			СостоянияЧтенияТопика = Новый Соответствие;
			СостоянияЧтения.Вставить(TopicPartition.Topic, СостоянияЧтенияТопика);
		КонецЕсли;
		
		СостояниеЧтенияРаздела = Новый Структура("НачальноеСмещение, КонечноеСмещение, ТекущаяПозиция", PartitionOffsets.Low, PartitionOffsets.High, ТекущаяПозиция);
		СостояниеЧтенияРаздела.Вставить("НачальноеСмещение"	, PartitionOffsets.Low);
		СостояниеЧтенияРаздела.Вставить("КонечноеСмещение"	, PartitionOffsets.High);
		СостояниеЧтенияРаздела.Вставить("ТекущаяПозиция"	, ТекущаяПозиция);
		
		СостоянияЧтенияТопика.Вставить(TopicPartition.Partition, СостояниеЧтенияРаздела);
		
		ЕстьНовыеСообщения = ЕстьНовыеСообщения Или (ТекущаяПозиция<PartitionOffsets.High);
		
	КонецЦикла;
	
	// Если длительность приема равна нулю и нет новых сообщений,
	// нет смысла инициировать получение сообщений.
	Если ЕстьНовыеСообщения Или ШинаИнфо.ОбменДлительностьСеанса > 0 Тогда
		
		ТекущийМомент = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Для Каждого TopicPartition Из Assignment Цикл
			
			СостояниеЧтенияРаздела = СостоянияЧтения[TopicPartition.Topic][TopicPartition.Partition];
			СостояниеЧтенияРаздела.Вставить("ПолученоСообщенийПослеПоследнейФиксации", 0);
			СостояниеЧтенияРаздела.Вставить("МоментПоследнейФиксации", ТекущийМомент);
			
			ЗаписьЖурналаРегистрации("Обмен данными.Кафка."+ШинаИнфо.Наименование,
					УровеньЖурналаРегистрации.Информация, , TopicPartition.Topic+":"+Формат(TopicPartition.Partition, "ЧН=0; ЧГ=0"),
					"Начато чтение раздела. Начальная позиция: "+Формат(СостояниеЧтенияРаздела.ТекущаяПозиция, "ЧН=0")+".");
			
		КонецЦикла;
		
		// Назначим получателя читать сообщения из переданных топиков-разделов
		Assignment = Кафка.ConsumerAssign(Consumer.Id, Consumer.Token, Assignment);
		Если Assignment = Неопределено Тогда
			ВызватьИсключение Кафка.ОписаниеОшибки;
		КонецЕсли;
				
		ОсталосьРазделов = Assignment.Количество();
		
		МоментПоследнейПроверкиНеобходимостиЗавершения = Неопределено;
		
		Пока Истина Цикл
						
			Попытка
			
				// Получим новое сообщение.
				Message = Кафка.ConsumerConsume(Consumer.Id, Consumer.Token, ШинаИнфо.ПриемТаймаутОжидания);
				
				Если Message = Неопределено Тогда
					ВызватьИсключение Кафка.ОписаниеОшибки;
				КонецЕсли;
			
			Исключение
				ЗафиксироватьПозицииЧтения(Assignment, СостоянияЧтения, ШинаИнфо, Обработка);
				ВызватьИсключение;
			КонецПопытки;
			
			Если Message <> Null И Не Message.IsPartitionEOF Тогда

				СостояниеЧтенияРаздела = СостоянияЧтения[Message.Topic][Message.Partition];
				
				Если Message.Offset < СостояниеЧтенияРаздела.ТекущаяПозиция Тогда
					ЗафиксироватьПозицииЧтения(Assignment, СостоянияЧтения, ШинаИнфо, Обработка);					
					ЗаписьЖурналаРегистрации("Обмен данными.Кафка."+ШинаИнфо.Наименование,
							УровеньЖурналаРегистрации.Предупреждение, , Message.Topic+":"+Формат(Message.Partition, "ЧН=0; ЧГ=0"),
							"Позиция полученного сообщения ("+Формат(Message.Offset, "ЧН=0")+") меньше текущей ("+Формат(СостояниеЧтенияРаздела.ТекущаяПозиция, "ЧН=0")+").");
					ВызватьИсключение "Обнаружено нарушение последовательности чтения данных. Подробности в журнале регистрации по номеру сеанса.";
				ИначеЕсли Message.Offset > СостояниеЧтенияРаздела.ТекущаяПозиция Тогда
					ЗафиксироватьПозицииЧтения(Assignment, СостоянияЧтения, ШинаИнфо, Обработка);
					ЗаписьЖурналаРегистрации("Обмен данными.Кафка."+ШинаИнфо.Наименование,
							УровеньЖурналаРегистрации.Предупреждение, , Message.Topic+":"+Формат(Message.Partition, "ЧН=0; ЧГ=0"),
							"Позиция полученного сообщения ("+Формат(Message.Offset, "ЧН=0")+") больше текущей ("+Формат(СостояниеЧтенияРаздела.ТекущаяПозиция, "ЧН=0")+").");
					ВызватьИсключение "Обнаружено нарушение последовательности чтения данных. Подробности в журнале регистрации по номеру сеанса.";
				КонецЕсли;
								
				Попытка
					// Обработка загруженного сообщения.
					Обработка.ЗагрузитьСообщение(Message);
				Исключение
					ЗафиксироватьПозицииЧтения(Assignment, СостоянияЧтения, ШинаИнфо, Обработка);
					ВызватьИсключение;
				КонецПопытки;
				
				// Обновление состояния чтения текущего раздела.
				СостояниеЧтенияРаздела.ПолученоСообщенийПослеПоследнейФиксации = СостояниеЧтенияРаздела.ПолученоСообщенийПослеПоследнейФиксации + 1;
				СостояниеЧтенияРаздела.ТекущаяПозиция = Message.Offset + 1;
				
				ОбъектыСчетчик = ОбъектыСчетчик + 1;
				
			КонецЕсли;
			
			ТекущийМомент = ТекущаяУниверсальнаяДатаВМиллисекундах();
			
			// Периодически проверяем необходимость завершения текущего сеанса. Если необходимо - прекращаем чтение.
			Если НеобходимоЗавершитьОперацию(ТекущийМомент, МоментПоследнейПроверкиНеобходимостиЗавершения, МоментЗавершения, ИдентификаторРодительскогоФЗ) Тогда
				Прервать;
			КонецЕсли;
			
			Если ШинаИнфо.ПриемВРеальномВремени Тогда
				
				// Если долго не получаем новых сообщений, надо периодически проверять наличие незафиксированных позиций.
				Если Message = Null Тогда
					ЗафиксироватьПозицииЧтения(Assignment, СостоянияЧтения, ШинаИнфо, Обработка);
				КонецЕсли;
								
			Иначе
				
				Если Message = Null Тогда
					// Завершаем загрузку в случае отсутствия новых сообщений.
					Прервать;
				ИначеЕсли Message.IsPartitionEOF Тогда
					ОсталосьРазделов = ОсталосьРазделов - 1;
					Если ОсталосьРазделов = 0 Тогда
						// От всех разделов были получены маркеры отсутствия новых сообщений. Завершаем чтение.
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Message<>Null И Не Message.IsPartitionEOF Тогда
				// Фиксируем текущую позицию чтения каждые 500 сообщений или каждые 20 секунд, смотря что наступит раньше.
				Если СостояниеЧтенияРаздела.ПолученоСообщенийПослеПоследнейФиксации >= 500
				Или ТекущийМомент - СостояниеЧтенияРаздела.МоментПоследнейФиксации >= 20000 Тогда
					ЗафиксироватьПозициюЧтения(ШинаИнфо.Кластер, Message.Topic, Message.Partition, СостояниеЧтенияРаздела, Обработка);
				КонецЕсли;
			КонецЕсли;
						
		КонецЦикла;
		
		Для Каждого TopicPartition Из Assignment Цикл
			
			СостояниеЧтенияРаздела = СостоянияЧтения[TopicPartition.Topic][TopicPartition.Partition];
			
			// Финальная фиксация текущей позиции чтения.
			ЗафиксироватьПозициюЧтения(ШинаИнфо.Кластер, TopicPartition.Topic, TopicPartition.Partition, СостояниеЧтенияРаздела, Обработка);
			
			ЗаписьЖурналаРегистрации("Обмен данными.Кафка."+ШинаИнфо.Наименование,
			УровеньЖурналаРегистрации.Информация, , TopicPartition.Topic+":"+Формат(TopicPartition.Partition, "ЧН=0; ЧГ=0"),
			"Завершено чтение раздела. Конечная позиция: "+Формат(СостояниеЧтенияРаздела.ТекущаяПозиция, "ЧН=0")+".");
			
			РегистрыСведений.КафкаПозиции.УдалитьСтарые(ШинаИнфо.Кластер, TopicPartition.Topic, TopicPartition.Partition);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого TopicPartition Из Assignment Цикл
		СостояниеЧтенияРаздела = СостоянияЧтения[TopicPartition.Topic][TopicPartition.Partition];
		Обработка.ПослеЗагрузкиРаздела(TopicPartition.Topic, TopicPartition.Partition, СостояниеЧтенияРаздела.ТекущаяПозиция);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьПозицииЧтения(Assignment, СостоянияЧтения, ШинаИнфо, Обработка)
	
	Для Каждого TopicPartition Из Assignment Цикл
		СостояниеЧтенияРаздела = СостоянияЧтения[TopicPartition.Topic][TopicPartition.Partition];
		ЗафиксироватьПозициюЧтения(ШинаИнфо.Кластер, TopicPartition.Topic, TopicPartition.Partition, СостояниеЧтенияРаздела, Обработка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьПозициюЧтения(Кластер, Тема, Раздел, СостояниеЧтенияРаздела, Обработка)
	
	Если СостояниеЧтенияРаздела.ПолученоСообщенийПослеПоследнейФиксации = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В случае буферизации сообщений обработкой нужно синхронизировать сброс буфера и фиксацию позиции чтения.
	Обработка.СброситьБуферы();
	
	Если ТранзакцияАктивна() Тогда
		ВызватьИсключение "Во время фиксации позиции чтения транзакция не должна быть активна.";
	КонецЕсли;
	
	РегистрыСведений.КафкаПозиции.УстановитьПозицию(Кластер, Тема, Раздел, СостояниеЧтенияРаздела.ТекущаяПозиция);
	
	СостояниеЧтенияРаздела.ПолученоСообщенийПослеПоследнейФиксации = 0;
	СостояниеЧтенияРаздела.МоментПоследнейФиксации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
КонецПроцедуры

Функция НеобходимоЗавершитьОперацию(ТекущийМомент, МоментПоследнейПроверки, МоментЗавершения, ИдентификаторРодительскогоФЗ)
		
	Если МоментЗавершения <> Неопределено И ТекущийМомент >= МоментЗавершения Тогда
		// Завершаем операцию по истечению максимальной длительности.
		Возврат Истина;
	КонецЕсли;
	
	Если МоментПоследнейПроверки = Неопределено Тогда
		МоментПоследнейПроверки = ТекущийМомент;
	КонецЕсли;
	
	Если ТекущийМомент - МоментПоследнейПроверки > 20000 Тогда
		
		МоментПоследнейПроверки = ТекущийМомент;

		Если ИдентификаторРодительскогоФЗ <> Неопределено Тогда
			РодительскоеФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторРодительскогоФЗ);
			Если РодительскоеФЗ = Неопределено Или РодительскоеФЗ.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		НеобходимостьЗавершенияСоединения = НеобходимостьЗавершенияСоединения();
		Если НеобходимостьЗавершенияСоединения.НеобходимоЗавершить Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Мониторинг

Процедура ВыгрузитьСостояниеРегламент(Кластер) Экспорт
	
	Если КафкаПовтИсп.ЭтоБэкап() И Не КафкаПереопределяемый.РазрешенОбменБэкапов() Тогда
		ТекстСообщения = "Обмен бэкапов запрещен. Выгрузка состояния не будет запущена.";
		КафкаКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации("Обмен данными.Кафка.Состояние обмена", УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
		Возврат;
	КонецЕсли;
		
	ВыгрузитьСостояние(Кластер, Истина);
		
КонецПроцедуры

Процедура ВыгрузитьСостояние(Кластер=Неопределено, Параллельно=Ложь) Экспорт
		
	КластерСсылка = ?(Кластер=Неопределено, Справочники.КафкаКластеры.ПоУмолчанию, Кластер);
	КластерПредставление = Строка(КластерСсылка);
	
	Ошибки = Новый Массив;
	
	Если Параллельно Тогда
		
		МассивЗаданий = Новый Массив;
		
		ЗаданиеПараметры = Новый Массив;
		ЗаданиеПараметры.Добавить(КластерСсылка);
		
		ЗаданиеВыгрузки = ФоновыеЗадания.Выполнить(
				"КафкаСервер.ВыгрузитьСостояниеВыгрузки",
				ЗаданиеПараметры,
				"КафкаВыгрузитьСостояниеВыгрузки_"+КластерСсылка.УникальныйИдентификатор(),
				"Кафка: Выгрузка состояния выгрузки для кластера """+КластерПредставление+"""."
		);
		МассивЗаданий.Добавить(ЗаданиеВыгрузки);
		
		ЗаданиеЗагрузки = ФоновыеЗадания.Выполнить(
				"КафкаСервер.ВыгрузитьСостояниеЗагрузки",
				ЗаданиеПараметры,
				"КафкаВыгрузитьСостояниеЗагрузки_"+КластерСсылка.УникальныйИдентификатор(),
				"Кафка: Выгрузка состояния загрузки для кластера """+КластерПредставление+"""."
		);
		МассивЗаданий.Добавить(ЗаданиеЗагрузки);
		
		Пока МассивЗаданий.Количество() > 0 Цикл
			
			МассивЗаданий = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивЗаданий, 5);
			
			Индекс = МассивЗаданий.Количество();
			
			Пока Индекс > 0 Цикл
				
				Индекс = Индекс - 1;
				Задание = МассивЗаданий[Индекс];
				
				Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					Продолжить;
				КонецЕсли;
				
				Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
					Ошибки.Добавить(Задание.ИнформацияОбОшибке);
				КонецЕсли;
				
				МассивЗаданий.Удалить(Индекс);
				
			КонецЦикла;
			
		КонецЦикла;
								
	Иначе
		
		Попытка
			ВыгрузитьСостояниеВыгрузки(КластерСсылка);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Ошибки.Добавить(ИнформацияОбОшибке);
		КонецПопытки;
		
		Попытка
			ВыгрузитьСостояниеЗагрузки(КластерСсылка);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Ошибки.Добавить(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
			
	Для Каждого ИнформацияОбОшибке Из Ошибки Цикл
		ВызватьИсключение
		"Ошибка при выгрузке состояния обмена для кластера """+КластерПредставление+""":
		|"+?(ИнформацияОбОшибке=Неопределено, "Неизвестная ошибка.", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецЦикла;
			
КонецПроцедуры

Процедура ВыгрузитьСостояниеВыгрузки(Кластер=Неопределено) Экспорт
	
	КластерСсылка = ?(Кластер=Неопределено, Справочники.КафкаКластеры.ПоУмолчанию, Кластер);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Кластеры.Ссылка КАК Ссылка,
	|	Кластеры.Представление КАК Представление,
	|	Кластеры.МониторингВключен КАК МониторингВключен,
	|	Кластеры.МониторингZabbixКомандаZabbixSender КАК КомандаZabbixSender
	|ИЗ
	|	Справочник.КафкаКластеры КАК Кластеры
	|ГДЕ
	|	Кластеры.Ссылка = &Кластер");
	Запрос.УстановитьПараметр("Кластер", КластерСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Передан неверный параметр.";
	КонецЕсли;
	КластерРеквизиты = РезультатЗапроса.Выгрузить()[0];
	
	Если ПустаяСтрока(КластерРеквизиты.КомандаZabbixSender) Тогда
		ВызватьИсключение "В настройках кластера """+КластерРеквизиты.Представление+""" не указана команда Zabbix Sender.";
	КонецЕсли;
	
	ZabbixВыгрузитьМетаданныеМетрикВыгрузки(КластерРеквизиты.Ссылка);
	
	СостояниеВыгрузки = СостояниеВыгрузки(КластерРеквизиты.Ссылка);
	
	Если СостояниеВыгрузки.Шины.Количество() > 0 Тогда
				
		ИдентификаторИБ = ZabbixИдентификаторИнформационнойБазы();
		Если Не ЗначениеЗаполнено(ИдентификаторИБ) Тогда
			ВызватьИсключение "Не удалось определить идентификатор текущей ИБ.";
		КонецЕсли;
		
		ZabbixМетрики = Новый Массив;
		
		Для Каждого Шина Из СостояниеВыгрузки.Шины Цикл
			
			ШинаКлюч = ИдентификаторИБ + "." + Шина.Id; 
			
			Если Шина.Таблицы <> Неопределено Тогда
			
				ZabbixКлюч = "exchange.kafka.upload.queue-length["+ШинаКлюч+"]";
				
				ZabbixЗначение = 0;
				Для Каждого Таблица Из Шина.Таблицы Цикл
					ZabbixЗначение = ZabbixЗначение + Таблица.ОбъектовКВыгрузке;
				КонецЦикла;			
				ZabbixЗначение = Формат(ZabbixЗначение, "ЧН=0; ЧГ=0");
				
				ZabbixМетрика = Новый Структура;
				ZabbixМетрика.Вставить("Ключ", ZabbixКлюч);
				ZabbixМетрика.Вставить("Значение", ZabbixЗначение);
				
				ZabbixМетрики.Добавить(ZabbixМетрика);
			
			КонецЕсли;
			
			Если Шина.ПоследнееВыполнениеОшибка <> Неопределено Тогда
				
				ZabbixКлюч = "exchange.kafka.upload.last-error["+ШинаКлюч+"]";
				
				ZabbixЗначение = Шина.ПоследнееВыполнениеОшибка;
				
				ZabbixМетрика = Новый Структура;
				ZabbixМетрика.Вставить("Ключ", ZabbixКлюч);
				ZabbixМетрика.Вставить("Значение", ZabbixЗначение);
				
				ZabbixМетрики.Добавить(ZabbixМетрика);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ZabbixМетрики.Количество() > 0 Тогда
		
			КодВозврата = ZabbixОтправитьЗначения(КластерРеквизиты.КомандаZabbixSender, ZabbixМетрики);
			
			Если КодВозврата <> 0 Тогда
				
				ТекстСообщения = "Выгрузка метрик состояния выгрузки для кластера """+КластерРеквизиты.Представление+""" завершилась ошибкой.
				|Код возврата = " + КодВозврата;
				
				ЗаписьЖурналаРегистрации("Обмен данными.Кафка.Состояние обмена",
						УровеньЖурналаРегистрации.Предупреждение, КластерСсылка.Метаданные(), КластерСсылка, ТекстСообщения);

				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ТекстСообщения;
				СообщениеПользователю.Сообщить();
						
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыгрузитьСостояниеЗагрузки(Кластер=Неопределено) Экспорт
	
	КластерСсылка = ?(Кластер=Неопределено, Справочники.КафкаКластеры.ПоУмолчанию, Кластер);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Кластеры.Ссылка КАК Ссылка,
	|	Кластеры.Представление КАК Представление,
	|	Кластеры.МониторингВключен КАК МониторингВключен,
	|	Кластеры.МониторингZabbixКомандаZabbixSender КАК КомандаZabbixSender
	|ИЗ
	|	Справочник.КафкаКластеры КАК Кластеры
	|ГДЕ
	|	Кластеры.Ссылка = &Кластер");
	Запрос.УстановитьПараметр("Кластер", КластерСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Передан неверный параметр.";
	КонецЕсли;
	КластерРеквизиты = РезультатЗапроса.Выгрузить()[0];
	
	Если ПустаяСтрока(КластерРеквизиты.КомандаZabbixSender) Тогда
		ВызватьИсключение "В настройках кластера """+КластерРеквизиты.Представление+""" не указана команда Zabbix Sender.";
	КонецЕсли;
	
	ZabbixВыгрузитьМетаданныеМетрикЗагрузки(Кластер);
	
	СостояниеЗагрузки = СостояниеЗагрузки(Кластер);
	
	Если СостояниеЗагрузки.Шины.Количество() > 0 Тогда
				
		ИдентификаторИБ = ZabbixИдентификаторИнформационнойБазы();
		Если Не ЗначениеЗаполнено(ИдентификаторИБ) Тогда
			ВызватьИсключение "Не удалось определить идентификатор текущей ИБ.";
		КонецЕсли;
		
		ZabbixМетрики = Новый Массив;
		
		Для Каждого Шина Из СостояниеЗагрузки.Шины Цикл
			
			ШинаКлюч = ИдентификаторИБ + "." + Шина.Id; 
			
			Если Шина.ПозицииЗагрузки <> Неопределено Тогда
			
				ZabbixКлюч = "exchange.kafka.download.queue-length["+ШинаКлюч+"]";
				
				ZabbixЗначение = 0;
				Для Каждого ПозицияЗагрузки Из Шина.ПозицииЗагрузки Цикл
					Значение = ПозицияЗагрузки.Конечная - ПозицияЗагрузки.Текущая;
					Значение = Макс(Значение, 0);
					ZabbixЗначение = ZabbixЗначение + Значение;
				КонецЦикла;			
				ZabbixЗначение = Формат(ZabbixЗначение, "ЧН=0; ЧГ=0");
				
				ZabbixМетрика = Новый Структура;
				ZabbixМетрика.Вставить("Ключ", ZabbixКлюч);
				ZabbixМетрика.Вставить("Значение", ZabbixЗначение);
				
				ZabbixМетрики.Добавить(ZabbixМетрика);
				
			КонецЕсли;
			
			Если Шина.ПоследнееВыполнениеОшибка <> Неопределено Тогда
				
				ZabbixКлюч = "exchange.kafka.download.last-error["+ШинаКлюч+"]";
				
				ZabbixЗначение = Шина.ПоследнееВыполнениеОшибка;
				
				ZabbixМетрика = Новый Структура;
				ZabbixМетрика.Вставить("Ключ", ZabbixКлюч);
				ZabbixМетрика.Вставить("Значение", ZabbixЗначение);
				
				ZabbixМетрики.Добавить(ZabbixМетрика);
				
			КонецЕсли;
			
		КонецЦикла;
				
		Если ZabbixМетрики.Количество() > 0 Тогда
		
			КодВозврата = ZabbixОтправитьЗначения(КластерРеквизиты.КомандаZabbixSender, ZabbixМетрики);
			
			Если КодВозврата <> 0 Тогда
				
				ТекстСообщения = "Выгрузка метрик состояния загрузки для кластера """+КластерРеквизиты.Представление+""" завершилась ошибкой.
				|Код возврата = " + КодВозврата;
				
				ЗаписьЖурналаРегистрации("Обмен данными.Кафка.Состояние обмена",
						УровеньЖурналаРегистрации.Предупреждение, КластерСсылка.Метаданные(), КластерСсылка, ТекстСообщения);

				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ТекстСообщения;
				СообщениеПользователю.Сообщить();
						
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеВыгрузки(Кластер=Неопределено) Экспорт

	КластерСсылка = ?(Кластер=Неопределено, Справочники.КафкаКластеры.ПоУмолчанию, Кластер);
	//КластерПредставление = Строка(КластерСсылка);
	
	Результат = Новый Структура;
	
	Результат.Вставить("Дата", ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	Шины = Новый Массив;
	Результат.Вставить("Шины", Шины);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шины.Ссылка КАК Ссылка,
	|	Шины.Наименование КАК Наименование,
	|	Шины.Узел КАК Узел,
	|	Шины.Тема КАК Тема
	|ИЗ
	|	Справочник.КафкаШины КАК Шины
	|ГДЕ
	|	Шины.Кластер = &Кластер
	|	И НЕ Шины.ЭтоГруппа
	|	И НЕ Шины.ПометкаУдаления
	|	И Шины.Вид = ""Приемник""
	|	И Шины.МониторингВключен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");
	Запрос.УстановитьПараметр("Кластер", КластерСсылка);
	РезультатЗапросаШины = Запрос.Выполнить();
	
	Если РезультатЗапросаШины.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВыборкаШины = РезультатЗапросаШины.Выбрать();
	
	Пока ВыборкаШины.Следующий() Цикл
		
		//Если Не ЗначениеЗаполнено(ВыборкаШины.Узел) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Шина = Новый Структура;
		Шины.Добавить(Шина);
		
		Шина.Вставить("Дата", ТекущаяУниверсальнаяДатаВМиллисекундах());
		Шина.Вставить("Id", Строка(ВыборкаШины.Ссылка.УникальныйИдентификатор()));
		Шина.Вставить("Наименование", ВыборкаШины.Наименование);
		Шина.Вставить("Тема", Тема(ВыборкаШины.Тема));
		
		// Значения по умолчанию
		Шина.Вставить("Таблицы", Неопределено);
		Шина.Вставить("ПоследнееВыполнениеБезОшибок", Неопределено);
		Шина.Вставить("ПоследнееВыполнениеОшибка", Неопределено);

		// 1. Подсчет объектов к выгрузке.
		
		Если ЗначениеЗаполнено(ВыборкаШины.Узел) Тогда
			
			Шина.Вставить("Таблицы", Новый Массив);
			
			МассивТекстЗапроса = Новый Массив;
			МассивИменаТаблиц  = Новый Массив;
			
			СоставТаблиц = ВыборкаШины.Узел.Метаданные().Состав;
			Для Каждого ЭлементСостава Из СоставТаблиц Цикл
				
				ТаблицаПолноеИмя = ЭлементСостава.Метаданные.ПолноеИмя();
				
				МассивТекстЗапроса.Добавить(
				"ВЫБРАТЬ
				|	КОЛИЧЕСТВО(*) КАК Количество
				|ИЗ
				|	"+ТаблицаПолноеИмя+".Изменения
				|ГДЕ
				|	Узел = &Узел");
				
				МассивИменаТаблиц.Добавить(ТаблицаПолноеИмя);
				
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = СтрСоединить(МассивТекстЗапроса, Символы.ПС+";"+Символы.ПС);
			Запрос.УстановитьПараметр("Узел", ВыборкаШины.Узел);
			РезультатыЗапросов = Запрос.ВыполнитьПакет();
					
			Для индекс = 0 По МассивИменаТаблиц.ВГраница() Цикл
				
				Таблица = Новый Структура;
				Шина.Таблицы.Добавить(Таблица);
				
				Таблица.Вставить("Таблица", МассивИменаТаблиц[индекс]);
				Таблица.Вставить("ОбъектовКВыгрузке", 0);
							
				РезультатЗапроса = РезультатыЗапросов[индекс];
				Если Не РезультатЗапроса.Пустой() Тогда
					С = РезультатЗапроса.Выгрузить()[0];
					Если ЗначениеЗаполнено(С.Количество) Тогда
					    Таблица.ОбъектовКВыгрузке = С.Количество;
					КонецЕсли;	
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЕсли;
		
		// 2. Последняя ошибка.
		
		РегламентноеЗадание = Неопределено;
		
		СтруктураПоиск = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.КафкаВыгрузка);
		М = РегламентныеЗадания.ПолучитьРегламентныеЗадания(СтруктураПоиск);
		Для Каждого З Из М Цикл
			Если З.Параметры<>Неопределено И З.Параметры.Количество()>0 И З.Параметры[0]=ВыборкаШины.Ссылка Тогда
				РегламентноеЗадание = З;
			КонецЕсли;
		КонецЦикла;
		
		Если РегламентноеЗадание <> Неопределено Тогда
			
			СтруктураПоиск = Новый Структура("РегламентноеЗадание", РегламентноеЗадание);
			М = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураПоиск);
			
			Если М.Количество() > 0 Тогда
				
				ПоследнееЗадание = М[0];
					
				ПоследнееВыполнениеБезОшибок = (ПоследнееЗадание.Состояние<>СостояниеФоновогоЗадания.ЗавершеноАварийно);
				Шина.Вставить("ПоследнееВыполнениеБезОшибок", ПоследнееВыполнениеБезОшибок);
				
				ПоследнееВыполнениеОшибка = "";
				Если ПоследнееЗадание.Состояние=СостояниеФоновогоЗадания.ЗавершеноАварийно И ПоследнееЗадание.ИнформацияОбОшибке<>Неопределено Тогда
					ПоследнееВыполнениеОшибка = ПодробноеПредставлениеОшибки(ПоследнееЗадание.ИнформацияОбОшибке);
				КонецЕсли;
				Шина.Вставить("ПоследнееВыполнениеОшибка", ПоследнееВыполнениеОшибка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Функция СостояниеЗагрузки(Кластер=Неопределено) Экспорт
	
	КластерСсылка = ?(Кластер=Неопределено, Справочники.КафкаКластеры.ПоУмолчанию, Кластер);
	КластерПредставление = Строка(КластерСсылка);
	
	Результат = Новый Структура;
	
	Результат.Вставить("Дата", ТекущаяУниверсальнаяДатаВМиллисекундах());
	Результат.Вставить("Шины", Новый Массив);
	
	ШиныИндекс = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шины.Ссылка КАК Ссылка,
	|	Шины.Наименование КАК Наименование,
	|	Шины.Тема КАК Тема
	|ИЗ
	|	Справочник.КафкаШины КАК Шины
	|ГДЕ
	|	Шины.Кластер = &Кластер
	|	И НЕ Шины.ЭтоГруппа
	|	И НЕ Шины.ПометкаУдаления
	|	И Шины.Вид = ""Источник""
	|	И Шины.МониторингВключен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");
	Запрос.УстановитьПараметр("Кластер", КластерСсылка);
	РезультатЗапросаШины = Запрос.Выполнить();
	
	Если РезультатЗапросаШины.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВыборкаШины = РезультатЗапросаШины.Выбрать();
	
	Пока ВыборкаШины.Следующий() Цикл
				
		Шина = Новый Структура;
		
		Шина.Вставить("Id", Строка(ВыборкаШины.Ссылка.УникальныйИдентификатор()));
		Шина.Вставить("Наименование", ВыборкаШины.Наименование);
		Шина.Вставить("Тема", Тема(ВыборкаШины.Тема));
		
		// Значения по умолчанию.
		Шина.Вставить("ПозицииЗагрузки", Неопределено);
		Шина.Вставить("ПоследнееВыполнениеБезОшибок", Неопределено);
		Шина.Вставить("ПоследнееВыполнениеОшибка", Неопределено);
		
		Результат.Шины.Добавить(Шина);
		ШиныИндекс.Вставить(ВыборкаШины.Ссылка, Шина);
		
	КонецЦикла;
	
	// 1. Очередь на загрузку
						
	Попытка
		
		Кафка = КафкаКлиентСервер.Адаптер(КластерСсылка);
		Конфигурация = КонфигурацияПолучателя(КластерСсылка);
		ИмяОперации = "Получение состояния загрузки для кластера """+КластерПредставление+""".";
		
		Consumer = Кафка.ConsumerCreate(ИмяОперации, Конфигурация);
		Если Consumer = Неопределено Тогда
			ВызватьИсключение Кафка.ОписаниеОшибки;
		КонецЕсли;
		
		ВыборкаШины = РезультатЗапросаШины.Выбрать();
		
		Пока ВыборкаШины.Следующий() Цикл
			
			Шина = ШиныИндекс.Получить(ВыборкаШины.Ссылка);
						
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Позиции.Тема КАК Тема,
			|	СУММА(Позиции.Позиция) КАК Текущая
			|ИЗ
			|	РегистрСведений.КафкаПозиции.СрезПоследних(
			|			,
			|			Кластер = &Кластер
			|				И Тема ПОДОБНО &Тема) КАК Позиции
			|
			|СГРУППИРОВАТЬ ПО
			|	Позиции.Тема
			|
			|УПОРЯДОЧИТЬ ПО
			|	Тема");
			Запрос.УстановитьПараметр("Кластер", КластерСсылка);	
			Запрос.УстановитьПараметр("Тема", СтрЗаменить(Шина.Тема, "*", "%"));	
			РезультатЗапроса = Запрос.Выполнить();
			
			ТаблицаТемы = РезультатЗапроса.Выгрузить();
			ТаблицаТемы.Колонки.Добавить("Начальная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(32, 0, ДопустимыйЗнак.Неотрицательный)));
			ТаблицаТемы.Колонки.Добавить("Конечная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(32, 0, ДопустимыйЗнак.Неотрицательный)));
			ТаблицаТемы.Индексы.Добавить("Тема");
			
			СмещенияТемы = Кафка.ПолучитьСмещенияТемы2(Consumer, Шина.Тема);
			
			Если СмещенияТемы = Неопределено Тогда
				ВызватьИсключение Кафка.ОписаниеОшибки;
			КонецЕсли;
			
			Для Каждого PartitionOffsets Из СмещенияТемы Цикл
				
				СтрокаТема = ТаблицаТемы.Найти(PartitionOffsets.Topic, "Тема");
				
				Если СтрокаТема = Неопределено Тогда
					
					СтрокаТема = ТаблицаТемы.Добавить();
					СтрокаТема.Тема = PartitionOffsets.Topic;
					СтрокаТема.Текущая = 0;
					
				КонецЕсли;
				
				СтрокаТема.Начальная = СтрокаТема.Начальная + PartitionOffsets.Low;
				СтрокаТема.Конечная	 = СтрокаТема.Конечная  + PartitionOffsets.High;
				
			КонецЦикла;
			
			ПозицииЗагрузки = Новый Массив;
			Шина.Вставить("ПозицииЗагрузки", ПозицииЗагрузки);
			
			Для Каждого СтрокаТема Из ТаблицаТемы Цикл
				
				ПозицияЗагрузки = Новый Структура;
				ПозицияЗагрузки.Вставить("Тема", СтрокаТема.Тема);
				ПозицияЗагрузки.Вставить("Текущая", СтрокаТема.Текущая);
				ПозицияЗагрузки.Вставить("Начальная", СтрокаТема.Начальная);
				ПозицияЗагрузки.Вставить("Конечная", СтрокаТема.Конечная);
				
				ПозицииЗагрузки.Добавить(ПозицияЗагрузки);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Кафка.ConsumerRelease(Consumer.Id, Consumer.Token);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Если Consumer <> Неопределено Тогда
			Кафка.ConsumerRelease(Consumer.Id, Consumer.Token);
		КонецЕсли;
		
		//ВызватьИсключение; // ???
		ТекстСообщения = "Получение количества объектов к загрузке для кластера """+КластерПредставление+""" завершилась ошибкой.
		|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации("Обмен данными.Кафка.Состояние обмена",
				УровеньЖурналаРегистрации.Предупреждение, КластерСсылка.Метаданные(), КластерСсылка, ТекстСообщения);
		
	КонецПопытки;
	
	// 2. Последняя ошибка.
		
	ВыборкаШины = РезультатЗапросаШины.Выбрать();
		
	Пока ВыборкаШины.Следующий() Цикл
		
		Шина = ШиныИндекс.Получить(ВыборкаШины.Ссылка);
		
		РегламентноеЗадание = Неопределено;
		
		СтруктураПоиск = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.КафкаЗагрузка);
		М = РегламентныеЗадания.ПолучитьРегламентныеЗадания(СтруктураПоиск);
		Для Каждого З Из М Цикл
			Если З.Параметры<>Неопределено И З.Параметры.Количество()>0 И З.Параметры[0]=ВыборкаШины.Ссылка Тогда
				РегламентноеЗадание = З;
			КонецЕсли;
		КонецЦикла;
		
		Если РегламентноеЗадание <> Неопределено Тогда
			
			СтруктураПоиск = Новый Структура("РегламентноеЗадание", РегламентноеЗадание);
			М = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураПоиск);
			
			Если М.Количество() > 0 Тогда
				
				ПоследнееЗадание = М[0];
					
				ПоследнееВыполнениеБезОшибок = (ПоследнееЗадание.Состояние<>СостояниеФоновогоЗадания.ЗавершеноАварийно);
				Шина.Вставить("ПоследнееВыполнениеБезОшибок", ПоследнееВыполнениеБезОшибок);
				
				ПоследнееВыполнениеОшибка = "";
				Если ПоследнееЗадание.Состояние=СостояниеФоновогоЗадания.ЗавершеноАварийно И ПоследнееЗадание.ИнформацияОбОшибке<>Неопределено Тогда
					ПоследнееВыполнениеОшибка = ПодробноеПредставлениеОшибки(ПоследнееЗадание.ИнформацияОбОшибке);
				КонецЕсли;
				Шина.Вставить("ПоследнееВыполнениеОшибка", ПоследнееВыполнениеОшибка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ZabbixВыгрузитьМетаданныеМетрикВыгрузки(Кластер=Неопределено) Экспорт
	
	КластерСсылка = ?(Кластер=Неопределено, Справочники.КафкаКластеры.ПоУмолчанию, Кластер);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Кластеры.Ссылка КАК Ссылка,
	|	Кластеры.Представление КАК Представление,
	|	Кластеры.МониторингZabbixКомандаZabbixSender КАК КомандаZabbixSender,
	|	Кластеры.МониторингZabbixКлючМетаданныеОчередьВыгрузки КАК КлючМетаданныеОчередьВыгрузки
	|ИЗ
	|	Справочник.КафкаКластеры КАК Кластеры
	|ГДЕ
	|	Кластеры.Ссылка = &Кластер");
	Запрос.УстановитьПараметр("Кластер", КластерСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Передан неверный параметр.";
	КонецЕсли;
	КластерРеквизиты = РезультатЗапроса.Выгрузить()[0];
	
	Если ПустаяСтрока(КластерРеквизиты.КомандаZabbixSender) Тогда
		ВызватьИсключение "В настройках кластера """+КластерРеквизиты.Представление+""" не указана команда Zabbix Sender.";
	КонецЕсли;
	
	Если ПустаяСтрока(КластерРеквизиты.КлючМетаданныеОчередьВыгрузки) Тогда
		ВызватьИсключение "В настройках кластера """+КластерРеквизиты.Представление+""" не указан ключ метаданных метрики ""Очередь выгрузки"".";
	КонецЕсли;
	
	Результат = Новый Массив;
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шины.Ссылка КАК Ссылка,
	|	Шины.Наименование КАК Наименование
	|ИЗ
	|	Справочник.КафкаШины КАК Шины
	|ГДЕ
	|	Шины.Кластер = &Кластер
	|	И Шины.Вид = ""Приемник""
	|	И НЕ Шины.ЭтоГруппа
	|	И НЕ Шины.ПометкаУдаления
	|	И Шины.МониторингВключен");
	Запрос.УстановитьПараметр("Кластер", КластерСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
				
		ИдентификаторИБ = ZabbixИдентификаторИнформационнойБазы();
		Если Не ЗначениеЗаполнено(ИдентификаторИБ) Тогда
			ВызватьИсключение "Не удалось определить идентификатор текущей ИБ.";
		КонецЕсли;
		
		ИмяИБ = КафкаПереопределяемый.ИмяИнформационнойБазы();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОписаниеШины = Новый Соответствие;
			ОписаниеШины.Вставить("{#UPKEY}" , ИдентификаторИБ+"."+Строка(Выборка.Ссылка.УникальныйИдентификатор()));
			ОписаниеШины.Вставить("{#UPNAME}", ИмяИБ + ": " + Выборка.Наименование);
			
			Результат.Добавить(ОписаниеШины);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, Результат);
	РезультатСтрока = ЗаписьJSON.Закрыть();
	
	Ключ = КластерРеквизиты.КлючМетаданныеОчередьВыгрузки;
	
	КодВозврата = ZabbixОтправитьЗначение(КластерРеквизиты.КомандаZabbixSender, Ключ, РезультатСтрока);
	
	Если КодВозврата <> 0 Тогда
		
		ТекстСообщения = "Выгрузка метаданных метрик выгрузки завершилась ошибкой.
		|Код возврата = " + КодВозврата;
		
		ЗаписьЖурналаРегистрации("Обмен данными.Кафка.Состояние обмена",
				УровеньЖурналаРегистрации.Предупреждение, КластерСсылка.Метаданные(), КластерСсылка, ТекстСообщения);

		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ZabbixВыгрузитьМетаданныеМетрикЗагрузки(Кластер=Неопределено) Экспорт
	
	КластерСсылка = ?(Кластер=Неопределено, Справочники.КафкаКластеры.ПоУмолчанию, Кластер);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Кластеры.Ссылка КАК Ссылка,
	|	Кластеры.Представление КАК Представление,
	|	Кластеры.МониторингZabbixКомандаZabbixSender КАК КомандаZabbixSender,
	|	Кластеры.МониторингZabbixКлючМетаданныеОчередьЗагрузки КАК КлючМетаданныеОчередьЗагрузки
	|ИЗ
	|	Справочник.КафкаКластеры КАК Кластеры
	|ГДЕ
	|	Кластеры.Ссылка = &Кластер");
	Запрос.УстановитьПараметр("Кластер", КластерСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Передан неверный параметр.";
	КонецЕсли;
	КластерРеквизиты = РезультатЗапроса.Выгрузить()[0];
	
	Если ПустаяСтрока(КластерРеквизиты.КомандаZabbixSender) Тогда
		ВызватьИсключение "В настройках кластера """+КластерРеквизиты.Представление+""" не указана команда Zabbix Sender.";
	КонецЕсли;
	
	Если ПустаяСтрока(КластерРеквизиты.КлючМетаданныеОчередьЗагрузки) Тогда
		ВызватьИсключение "В настройках кластера """+КластерРеквизиты.Представление+""" не указан ключ метаданных метрики ""Очередь загрузки"".";
	КонецЕсли;
	
	Результат = Новый Массив;
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шины.Ссылка КАК Ссылка,
	|	Шины.Наименование КАК Наименование
	|ИЗ
	|	Справочник.КафкаШины КАК Шины
	|ГДЕ
	|	Шины.Кластер = &Кластер
	|	И Шины.Вид = ""Источник""
	|	И НЕ Шины.ЭтоГруппа
	|	И НЕ Шины.ПометкаУдаления
	|	И Шины.МониторингВключен");
	Запрос.УстановитьПараметр("Кластер", КластерСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
				
		ИдентификаторИБ = ZabbixИдентификаторИнформационнойБазы();
		Если Не ЗначениеЗаполнено(ИдентификаторИБ) Тогда
			ВызватьИсключение "Не удалось определить идентификатор текущей ИБ.";
		КонецЕсли;
		
		ИмяИБ = КафкаПереопределяемый.ИмяИнформационнойБазы();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОписаниеШины = Новый Соответствие;
			ОписаниеШины.Вставить("{#DOWNKEY}" , ИдентификаторИБ+"."+Строка(Выборка.Ссылка.УникальныйИдентификатор()));
			ОписаниеШины.Вставить("{#DOWNNAME}", ИмяИБ + ": " + Выборка.Наименование);
			
			Результат.Добавить(ОписаниеШины);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, Результат);
	РезультатСтрока = ЗаписьJSON.Закрыть();
	
	Ключ = КластерРеквизиты.КлючМетаданныеОчередьЗагрузки;
	
	КодВозврата = ZabbixОтправитьЗначение(КластерРеквизиты.КомандаZabbixSender, Ключ, РезультатСтрока);
	
	Если КодВозврата <> 0 Тогда
		
		ТекстСообщения = "Выгрузка метаданных метрик загрузки завершилась ошибкой.
		|Код возврата = " + КодВозврата;
		
		ЗаписьЖурналаРегистрации("Обмен данными.Кафка.Состояние обмена",
				УровеньЖурналаРегистрации.Предупреждение, КластерСсылка.Метаданные(), КластерСсылка, ТекстСообщения);

		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
				
	КонецЕсли;
	
КонецПроцедуры

Функция ZabbixВыгрузитьМетрикуОбъектовВыгружено(ШинаИнфо, КомандаZabbixSender, Значение)
		
	ИдентификаторИБ = ZabbixИдентификаторИнформационнойБазы();
	Если Не ЗначениеЗаполнено(ИдентификаторИБ) Тогда
		ВызватьИсключение "Не удалось определить идентификатор текущей ИБ.";
	КонецЕсли;
	
	ШинаКлюч = ИдентификаторИБ+"."+Строка(ШинаИнфо.Ссылка.УникальныйИдентификатор());
	ZabbixКлюч = "exchange.kafka.upload.processed["+ШинаКлюч+"]";
	
	ZabbixЗначение = Формат(Значение, "ЧН=0; ЧГ=0");
	
	КодВозврата = ZabbixОтправитьЗначение(КомандаZabbixSender, ZabbixКлюч, ZabbixЗначение);
	
	Если КодВозврата <> 0 Тогда
		
		ТекстСообщения = "Выгрузка метрики ""Объектов выгружено"" завершилась ошибкой.
		|Код возврата = " + КодВозврата;
		
		ЗаписьЖурналаРегистрации("Обмен данными.Кафка.Состояние обмена",
				УровеньЖурналаРегистрации.Предупреждение, ШинаИнфо.Ссылка.Метаданные(), ШинаИнфо.Ссылка, ТекстСообщения);

		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ZabbixВыгрузитьМетрикуОбъектовЗагружено(ШинаИнфо, КомандаZabbixSender, Значение)
		
	ИдентификаторИБ = ZabbixИдентификаторИнформационнойБазы();
	Если Не ЗначениеЗаполнено(ИдентификаторИБ) Тогда
		ВызватьИсключение "Не удалось определить идентификатор текущей ИБ.";
	КонецЕсли;
	
	ШинаКлюч = ИдентификаторИБ+"."+Строка(ШинаИнфо.Ссылка.УникальныйИдентификатор());
	ZabbixКлюч = "exchange.kafka.download.processed["+ШинаКлюч+"]";
	
	ZabbixЗначение = Формат(Значение, "ЧН=0; ЧГ=0");
	
	КодВозврата = ZabbixОтправитьЗначение(КомандаZabbixSender, ZabbixКлюч, ZabbixЗначение);
	
	Если КодВозврата <> 0 Тогда
		
		ТекстСообщения = "Выгрузка метрики ""Объектов загружено"" завершилась ошибкой.
		|Код возврата = " + КодВозврата;
		
		ЗаписьЖурналаРегистрации("Обмен данными.Кафка.Состояние обмена",
				УровеньЖурналаРегистрации.Предупреждение, ШинаИнфо.Ссылка.Метаданные(), ШинаИнфо.Ссылка, ТекстСообщения);

		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ZabbixИдентификаторИнформационнойБазы()
	
	ИмяИБ = КафкаПереопределяемый.ИмяИнформационнойБазы();
	ИмяИБ = СтрЗаменить(ИмяИБ, Символы.НПП, "_");
	ИмяИБ = СтрЗаменить(ИмяИБ, " ", "_");
	ИмяИБ = СтрЗаменить(ИмяИБ, ".", "_");
	
	Возврат ИмяИБ;
	
КонецФункции

Функция ZabbixОтправитьЗначение(ZabbixSender, Ключ, Значение)
	
	Метрики = Новый Массив;
	Метрики.Добавить(Новый Структура("Ключ, Значение", Ключ, Значение));
	
	Возврат ZabbixОтправитьЗначения(ZabbixSender, Метрики);
	
	//Команда = ZabbixSender;
	//
	//Команда = Команда + " -k """ + СтрЗаменить(Ключ, """", "\""") + """";
	//
	//Команда = Команда + " -o """ + СтрЗаменить(Значение, """", "\""") + """";
	//	
	//КодВозврата = Неопределено;
	//
	//ЗапуститьПриложение(Команда, , Истина, КодВозврата);
	//
	//Возврат КодВозврата;
	
КонецФункции

Функция ZabbixОтправитьЗначения(ZabbixSender, Метрики)
	
	Если Метрики.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("zabbix");
	
	ЗаписьДанных = Новый ЗаписьДанных(ИмяФайла);
	
	Для Каждого Метрика Из Метрики Цикл
		
		Ключ = Метрика.Ключ;
		Ключ = СтрЗаменить(Ключ, "\", "\\");
		Ключ = СтрЗаменить(Ключ, """", "\""");
		
		Значение = Метрика.Значение;
		Значение = СтрЗаменить(Значение, "\", "\\");
		Значение = СтрЗаменить(Значение, """", "\""");
		Значение = СтрЗаменить(Значение, Символы.ПС, "\n");
		
		ЗаписьДанных.ЗаписатьСимволы("- """);
		
		ЗаписьДанных.ЗаписатьСимволы(Ключ);
		
		ЗаписьДанных.ЗаписатьСимволы(""" """);
		
		ЗаписьДанных.ЗаписатьСимволы(Значение);
		
		ЗаписьДанных.ЗаписатьСтроку("""");
		
	КонецЦикла;
	
	ЗаписьДанных.Закрыть();
	
	Команда = ZabbixSender + " -i """ + ИмяФайла + """";
	
	КодВозврата = Неопределено;
	
	Попытка
		
		ЗапуститьПриложение(Команда, , Истина, КодВозврата);
		
	Исключение
		
		УдалитьФайлы(ИмяФайла);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат КодВозврата;
	
КонецФункции

Функция ПараметрыМониторинга(Кластер)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Кластеры.МониторингВключен КАК Включен,
	|	Кластеры.МониторингПользовательРЗ КАК ПользовательРЗ,
	|	Кластеры.МониторингZabbixКомандаZabbixSender КАК ZabbixКомандаZabbixSender,
	|	Кластеры.МониторингZabbixКлючМетаданныеОчередьВыгрузки КАК ZabbixКлючМетаданныеОчередьВыгрузки,
	|	Кластеры.МониторингZabbixКлючМетаданныеОчередьЗагрузки КАК ZabbixКлючМетаданныеОчередьЗагрузки
	|ИЗ
	|	Справочник.КафкаКластеры КАК Кластеры
	|ГДЕ
	|	Кластеры.Ссылка = &Кластер");
	Запрос.УстановитьПараметр("Кластер", Кластер);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0];
	
КонецФункции

#КонецОбласти

#Область СлужебныеФункции

Функция КонфигурацияБазовая(Кластер) Экспорт
	
	КластерСсылка = ?(Кластер=Неопределено, Справочники.КафкаКластеры.ПоУмолчанию, Кластер);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Кластеры.КафкаСерверы КАК Серверы,
	|	Кластеры.КафкаПротоколБезопасности КАК ПротоколБезопасности,
	|	Кластеры.КафкаПользователь КАК Пользователь,
	|	Кластеры.КафкаПользовательУстановлен КАК ПользовательУстановлен,
	|	Кластеры.КафкаПароль КАК Пароль
	|ИЗ
	|	Справочник.КафкаКластеры КАК Кластеры
	|ГДЕ
	|	Кластеры.Ссылка = &Кластер");
	Запрос.УстановитьПараметр("Кластер", КластерСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Передан некорректный параметр.";
	КонецЕсли;
	
	КластерРеквизиты = РезультатЗапроса.Выгрузить()[0];
	
	Результат = Новый Соответствие;
		
	Результат.Вставить("bootstrap.servers", КластерРеквизиты.Серверы);
	Результат.Вставить("security.protocol", КластерРеквизиты.ПротоколБезопасности);
	Если СтрНачинаетсяС(ВРег(КластерРеквизиты.ПротоколБезопасности), "SASL") Тогда
		Результат.Вставить("sasl.mechanism", "PLAIN");
		Если КластерРеквизиты.ПользовательУстановлен Тогда
			Результат.Вставить("sasl.username", КластерРеквизиты.Пользователь);
		Иначе
			Результат.Вставить("sasl.username", КафкаПереопределяемый.ПользовательПоУмолчанию());
		КонецЕсли;
		Результат.Вставить("sasl.password", КластерРеквизиты.Пароль);
	КонецЕсли;
		
	Возврат Результат;
			
КонецФункции

Функция КонфигурацияОтправителя(Кластер=Неопределено) Экспорт
	
	КластерСсылка = ?(Кластер=Неопределено, Справочники.КафкаКластеры.ПоУмолчанию, Кластер);
	
	Результат = КонфигурацияБазовая(КластерСсылка);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Конфигурация.Параметр КАК Параметр,
	|	Конфигурация.Значение КАК Значение
	|ИЗ
	|	Справочник.КафкаКластеры.КафкаКонфигурацияОтправителя КАК Конфигурация
	|ГДЕ
	|	Конфигурация.Ссылка = &Кластер");
	Запрос.УстановитьПараметр("Кластер", КластерСсылка);
	РезультатЗапроса = Запрос.Выполнить();
			
	ТЗ = РезультатЗапроса.Выгрузить();
	Для Каждого С Из ТЗ Цикл
		Результат.Вставить(С.Параметр, С.Значение);
	КонецЦикла;
	
	Возврат Результат;
			
КонецФункции

Функция КонфигурацияПолучателя(Кластер=Неопределено) Экспорт
	
	КластерСсылка = ?(Кластер=Неопределено, Справочники.КафкаКластеры.ПоУмолчанию, Кластер);
	
	Результат = КонфигурацияБазовая(КластерСсылка);
	
	Результат.Вставить("group.id", КафкаПереопределяемый.ГруппаПолучателей());
	Результат.Вставить("auto.offset.reset", "earliest");
	Результат.Вставить("enable.auto.commit", "false");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Конфигурация.Параметр КАК Параметр,
	|	Конфигурация.Значение КАК Значение
	|ИЗ
	|	Справочник.КафкаКластеры.КафкаКонфигурацияПолучателя КАК Конфигурация
	|ГДЕ
	|	Конфигурация.Ссылка = &Кластер");
	Запрос.УстановитьПараметр("Кластер", КластерСсылка);
	РезультатЗапроса = Запрос.Выполнить();
			
	ТЗ = РезультатЗапроса.Выгрузить();
	Для Каждого С Из ТЗ Цикл
		Результат.Вставить(С.Параметр, С.Значение);
	КонецЦикла;
	
	Возврат Результат;
			
КонецФункции

Функция КонфигурацияШины(Шина) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шины.Ссылка КАК Ссылка,
	|	Шины.Кластер КАК Кластер,
	|	Шины.Вид КАК Вид
	|ИЗ
	|	Справочник.КафкаШины КАК Шины
	|ГДЕ
	|	Шины.Ссылка = &Шина
	|	И НЕ Шины.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Конфигурация.Параметр КАК Параметр,
	|	Конфигурация.Значение КАК Значение
	|ИЗ
	|	Справочник.КафкаШины.КафкаКонфигурация КАК Конфигурация
	|ГДЕ
	|	Конфигурация.Ссылка = &Шина");
	Запрос.УстановитьПараметр("Шина", Шина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[0].Пустой() Тогда
		ВызватьИсключение "Передан некорректный параметр.";
	КонецЕсли;
	
	ШинаРеквизиты = РезультатЗапроса[0].Выгрузить()[0];
	
	Если ШинаРеквизиты.Вид = "Приемник" Тогда
		Результат = КонфигурацияОтправителя(ШинаРеквизиты.Кластер);
	ИначеЕсли ШинаРеквизиты.Вид = "Источник" Тогда
		Результат = КонфигурацияПолучателя(ШинаРеквизиты.Кластер);
	Иначе
		ВызватьИсключение "Неожиданный вид шины: """+ШинаРеквизиты.Вид+""".";
	КонецЕсли;
			
	ТЗ = РезультатЗапроса[1].Выгрузить();
	Для Каждого С Из ТЗ Цикл
		Результат.Вставить(С.Параметр, С.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьРеквизитыОбработки(Обработка, ПотенциальныеРеквизиты)
	
	ОбработкаМетаданные = Обработка.Метаданные();
	
	Для Каждого КЗ Из ПотенциальныеРеквизиты Цикл
		
		ОбработкаРеквизит = ОбработкаМетаданные.Реквизиты.Найти(КЗ.Ключ);
		
		Если ОбработкаРеквизит <> Неопределено Тогда
			
			ЗначениеПравое = КЗ.Значение;
			Обработка[КЗ.Ключ] = ЗначениеПравое;
			ЗначениеЛевое = Обработка[КЗ.Ключ]; 
			
			Если Не ЗначениеЗаполнено(ЗначениеЛевое) И Не ЗначениеЗаполнено(ЗначениеПравое) Тогда
			ИначеЕсли ЗначениеЛевое <> ЗначениеПравое Тогда
				ВызватьИсключение "Не удалось установить реквизит """+КЗ.Ключ+""" при иницилизации обработки выгрузки/загрузки данных.";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ШинаИнфо(Шина) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шины.Ссылка КАК Ссылка,
	|	Шины.ПометкаУдаления КАК ПометкаУдаления,
	|	Шины.Родитель КАК Родитель,
	|	Шины.ЭтоГруппа КАК ЭтоГруппа,
	|	Шины.Наименование КАК Наименование,
	|	Шины.Кластер КАК Кластер,
	|	Шины.Вид КАК Вид,
	|	Шины.Тема КАК Тема,
	|	Шины.Узел КАК Узел,
	|	Шины.ОбменДлительностьСеанса КАК ОбменДлительностьСеанса,
	|	Шины.ОбменКоличествоПотоков КАК ОбменКоличествоПотоков,
	|	Шины.ОбменПоРасписанию КАК ОбменПоРасписанию,
	|	Шины.ОбменРасписание КАК ОбменРасписание,
	|	Шины.ОбменРасписаниеРазброс КАК ОбменРасписаниеРазброс,
	|	Шины.Обработка КАК Обработка,
	|	Шины.КлиентТаймаут КАК КлиентТаймаут,
	|	Шины.ОтправкаБлокироватьТаблицуРегистрации КАК ОтправкаБлокироватьТаблицуРегистрации,
	|	Шины.ПриемВРеальномВремени КАК ПриемВРеальномВремени,
	|	Шины.ПриемТаймаутОжидания КАК ПриемТаймаутОжидания,
	|	ЕСТЬNULL(ЕСТЬNULL(Шины.ПользовательРЗ, Шины.Родитель.ПользовательРЗ), """") КАК ПользовательРЗ,
	|	Шины.МониторингВключен КАК МониторингВключен
	|ИЗ
	|	Справочник.КафкаШины КАК Шины
	|ГДЕ
	|	Шины.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Шина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[0].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Шапка = РезультатЗапроса[0].Выгрузить()[0];
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		Результат.Вставить(Колонка.Имя, Шапка[Колонка.Имя]);
	КонецЦикла;
		
	Результат.ОбменРасписание = Результат.ОбменРасписание.Получить();
	
	Результат.Тема = Тема(Результат.Тема);
	
	Результат.Вставить("ТемаЭтоПрефикс", СтрЗаканчиваетсяНа(Результат.Тема, "*"));
	Если Результат.ТемаЭтоПрефикс Тогда
		Результат.Вставить("ТемаПрефикс", Лев(Результат.Тема, СтрДлина(Результат.Тема)-1));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьРегламентныеЗадания(ШинаСсылка, Удалить=Неопределено) Экспорт
		
	МетаданныеОтправка = Метаданные.РегламентныеЗадания.КафкаВыгрузка;
	МетаданныеПрием = Метаданные.РегламентныеЗадания.КафкаЗагрузка;
	
	ШинаИнфо = ШинаИнфо(ШинаСсылка);
	
	Если Удалить = Неопределено Тогда
		Удалить = ШинаИнфо.ПометкаУдаления;
	КонецЕсли;
		
	МассивЗаданийОтправка = Новый Массив;
	м = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", МетаданныеОтправка));
	Для Каждого Задание Из м Цикл
		Если Задание.Параметры=Неопределено Или Задание.Параметры.Количество()=0 Или ТипЗнч(Задание.Параметры[0])<>Тип("СправочникСсылка.КафкаШины") Или Не ЗначениеЗаполнено(Задание.Параметры[0]) Тогда
			УдалитьРегламентноеЗадание(Задание);
		ИначеЕсли Задание.Параметры[0] = ШинаСсылка Тогда
			МассивЗаданийОтправка.Добавить(Задание);
		КонецЕсли;
	КонецЦикла;
	
	МассивЗаданийПрием = Новый Массив;
	м = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", МетаданныеПрием));
	Для Каждого Задание Из м Цикл
		Если Задание.Параметры=Неопределено Или Задание.Параметры.Количество()=0 Или ТипЗнч(Задание.Параметры[0])<>Тип("СправочникСсылка.КафкаШины") Или Не ЗначениеЗаполнено(Задание.Параметры[0]) Тогда
			УдалитьРегламентноеЗадание(Задание);
		ИначеЕсли Задание.Параметры[0] = ШинаСсылка Тогда
			МассивЗаданийПрием.Добавить(Задание);
		КонецЕсли;
	КонецЦикла;
	
	Если Удалить Или Не ШинаИнфо.ОбменПоРасписанию Тогда
		Для Каждого Задание Из МассивЗаданийОтправка Цикл
			УдалитьРегламентноеЗадание(Задание);
		КонецЦикла;
		Для Каждого Задание Из МассивЗаданийПрием Цикл
			УдалитьРегламентноеЗадание(Задание);
		КонецЦикла;
		Возврат;
	КонецЕсли;
		
	Если ШинаИнфо.Вид = "Приемник" Тогда
		
		Для Каждого Задание Из МассивЗаданийПрием Цикл
			УдалитьРегламентноеЗадание(Задание);
		КонецЦикла;
		
		Задание = Неопределено;
		
		Если МассивЗаданийОтправка.Количество() > 0 Тогда
			Задание = МассивЗаданийОтправка.Получить(0);
			МассивЗаданийОтправка.Удалить(0);
		КонецЕсли;
		
		Для Каждого Задание_ Из МассивЗаданийОтправка Цикл
			УдалитьРегламентноеЗадание(Задание_);
		КонецЦикла;
		
		ОбновитьРегламентноеЗадание(Задание, МетаданныеОтправка, ШинаИнфо);
							
	ИначеЕсли ШинаИнфо.Вид = "Источник" Тогда
		
		Для Каждого Задание Из МассивЗаданийОтправка Цикл
			УдалитьРегламентноеЗадание(Задание);
		КонецЦикла;
		
		Задание = Неопределено;
		
		Если МассивЗаданийПрием.Количество() > 0 Тогда
			Задание = МассивЗаданийПрием.Получить(0);
			МассивЗаданийПрием.Удалить(0);
		КонецЕсли;
		
		Для Каждого Задание_ Из МассивЗаданийПрием Цикл
			УдалитьРегламентноеЗадание(Задание_);
		КонецЦикла;
		
		ОбновитьРегламентноеЗадание(Задание, МетаданныеПрием, ШинаИнфо);
											
	Иначе
		ВызватьИсключение "Неизвестный вид шины: " + ШинаИнфо.Вид;
	КонецЕсли;
	
КонецПроцедуры
Функция ОбновитьРегламентноеЗадание(Задание, ЗаданиеМетаданные, ШинаИнфо)
	
	Если Задание = Неопределено Тогда
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(ЗаданиеМетаданные);
	КонецЕсли;
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	ЗаполнитьЗначенияСвойств(Расписание, ШинаИнфо.ОбменРасписание);
	
	Если Расписание.ПериодПовтораВТечениеДня <> 0 И ШинаИнфо.ОбменРасписаниеРазброс <> 0 Тогда
		ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;
		Смещение = ГенераторСлучайныхЧисел.СлучайноеЧисло(0, ШинаИнфо.ОбменРасписаниеРазброс*2) - ШинаИнфо.ОбменРасписаниеРазброс;
		Расписание.ПериодПовтораВТечениеДня = Расписание.ПериодПовтораВТечениеДня + Смещение;
	КонецЕсли;
	
	Параметры = Новый Массив;
	Параметры.Добавить(ШинаИнфо.Ссылка);
	
	Задание.Параметры		= Параметры;
	Задание.Ключ			= ЗаданиеМетаданные.Ключ+"_"+ШинаИнфо.Ссылка.УникальныйИдентификатор();
	Задание.Наименование	= ЗаданиеМетаданные.Наименование+" ("+ШинаИнфо.Наименование+")";
	Задание.Расписание		= Расписание;
	Задание.Использование	= Не ШинаИнфо.ПометкаУдаления;
	Задание.ИмяПользователя	= ШинаИнфо.ПользовательРЗ;
	
	Задание.Записать();
	
КонецФункции
Процедура УдалитьРегламентноеЗадание(РегламентноеЗадание) Экспорт
	
	РегламентноеЗадание.Удалить();
	
	Отбор = Новый Структура;
	Отбор.Вставить("РегламентноеЗадание", РегламентноеЗадание);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
	Для Каждого ФоновоеЗадание Из АктивныеФоновыеЗадания Цикл
		ФоновоеЗадание.Отменить();
	КонецЦикла;
	
КонецПроцедуры

Функция Тема(ИсходнаяТема) Экспорт
		
	Если КафкаПовтИсп.ЭтоБэкап() Тогда
		Возврат "test-" + ИсходнаяТема;
	КонецЕсли;
	
	Возврат ИсходнаяТема;
	
КонецФункции

Процедура ПолучитьСмещенияТемыВФоне(Кластер, Тема, АдресРезультата=Неопределено) Экспорт
	
	Кафка = КафкаКлиентСервер.Адаптер(Кластер);
	
	Операция = "Получение смещений темы """+Тема+"""";
	Конфигурация = КонфигурацияПолучателя(Кластер);
	Результат = Кафка.ПолучитьСмещенияТемы(Операция, Конфигурация, Тема);
	
	Если Результат <> Неопределено Тогда
		ОписаниеРезультата = Новый Структура("Успех, Результат", Истина, Результат);
	Иначе
		ОписаниеРезультата = Новый Структура("Успех, ОписаниеОшибки", Ложь, Кафка.ОписаниеОшибки);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ОписаниеРезультата, АдресРезультата);
	
КонецПроцедуры

Функция СтрокаСоединенияИБ() Экспорт
	
	Если КафкаПовтИсп.ЭтоФоновоеЗадание() Тогда
		Возврат СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
	
	Параметры = Новый Массив;
	Параметры.Добавить(АдресРезультата);
	
	Задание = ФоновыеЗадания.Выполнить(
			"КафкаСервер.ПолучитьСтрокуСоединенияИнформационнойБазыВФоне",
			Параметры,
			,
			"Кафка: Получение строки соединения информационной базы"
	);
	
	Пока Задание.Состояние = СостояниеФоновогоЗадания.Активно Цикл
		
		Задание = Задание.ОжидатьЗавершенияВыполнения(1);
		
	КонецЦикла;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		УдалитьИзВременногоХранилища(АдресРезультата);	
		
	Иначе
		
		УдалитьИзВременногоХранилища(АдресРезультата);	
		
		Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			
			ОписаниеОшибки = ?(Задание.ИнформацияОбОшибке = Неопределено,
					"Фоновое задание завершилось с неизвестнос ошибкой.",
			        ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке)
			);
			
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			
			ОписаниеОшибки = "Фоновое задание было отменено.";
			
		ИначеЕсли Задание.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда
			
			ОписаниеОшибки = "Неожиданное состояние фонового задания: "+Задание.Состояние+".";
			
		КонецЕсли;
		
		ВызватьИсключение ОписаниеОшибки;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьСтрокуСоединенияИнформационнойБазыВФоне(АдресРезультата) Экспорт
	
	Результат = СтрокаСоединенияИнформационнойБазы();
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция ЭтоФоновоеЗадание() Экспорт
	
	ТекущийСеансИБ = ПолучитьТекущийСеансИнформационнойБазы();
	ТекущееФЗ = ТекущийСеансИБ.ПолучитьФоновоеЗадание();
	
	Возврат (ТекущееФЗ <> Неопределено);
	
КонецФункции

#КонецОбласти
