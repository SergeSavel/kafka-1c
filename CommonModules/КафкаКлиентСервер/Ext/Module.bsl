// Copyright 2024 Савельев Сергей Владимирович
//
// Лицензировано согласно Лицензии Apache, Версия 2.0 ("Лицензия");
// вы можете использовать этот файл только в соответствии с Лицензией.
// Вы можете найти копию Лицензии по адресу
//
// http://www.apache.org/licenses/LICENSE-2.0.
//
// За исключением случаев, когда это регламентировано существующим
// законодательством, или если это не оговорено в письменном соглашении,
// программное обеспечение, распространяемое на условиях данной Лицензии,
// предоставляется "КАК ЕСТЬ", и любые явные или неявные ГАРАНТИИ ОТВЕРГАЮТСЯ.
// Информацию об основных правах и ограничениях, применяемых к определенному
// языку согласно Лицензии, вы можете найти в данной Лицензии.

Функция ВерсияПодсистемы() Экспорт
	
	Возврат "4.1.5";
	
КонецФункции

Процедура СообщитьПользователю(Текст, ОбъектДанных=Неопределено, Поле=Неопределено, ИдентификаторНазначения=Неопределено) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Если ОбъектДанных <> Неопределено Тогда
		Сообщение.УстановитьДанные(ОбъектДанных);
	КонецЕсли;
	Если Поле <> Неопределено Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;
	Если ИдентификаторНазначения <> Неопределено Тогда
		Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
	КонецЕсли;
	Сообщение.Сообщить();
	
КонецПроцедуры

Функция КорневаяИнформацияОбОшибке(ИнформацияОбОшибке) Экспорт
	
	Результат = ИнформацияОбОшибке;
	Пока Результат.Причина <> Неопределено Цикл
		Результат = Результат.Причина;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ТолстыйКлиентУправляемоеприложение Или ВнешнееСоединение Или МобильноеПриложениеСервер Тогда
Функция Адаптер(Кластер=Неопределено) Экспорт
	
	КластерСсылка = ?(Кластер=Неопределено, Справочники.КафкаКластеры.ПоУмолчанию, Кластер);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Кластеры.ПроксиАдрес КАК ПроксиАдрес,
	|	Кластеры.ПроксиПользователь КАК ПроксиПользователь,
	|	Кластеры.ПроксиПароль КАК ПроксиПароль,
	|	Кластеры.ПроксиТаймаут КАК ПроксиТаймаут
	|ИЗ
	|	Справочник.КафкаКластеры КАК Кластеры
	|ГДЕ
	|	Кластеры.Ссылка = &Кластер");
	Запрос.УстановитьПараметр("Кластер", КластерСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Передан некорректный параметр.";
	КонецЕсли;
	
	Адаптер = КафкаПереопределяемый.Адаптер();
	
	КластерРеквизиты = РезультатЗапроса.Выгрузить()[0];
	
	Адаптер.Инициализировать(
			КластерРеквизиты.ПроксиАдрес,
			КластерРеквизиты.ПроксиПользователь,
			КластерРеквизиты.ПроксиПароль,
			КластерРеквизиты.ПроксиТаймаут
	);
			
	Возврат Адаптер;
	
КонецФункции
#КонецЕсли

#Область СериализацияJSON

#Если Не ВебКлиент Тогда

Функция JsonСериализовать(Значение, ПараметрыЗаписиИлиЗаписьJSON=Неопределено, НастройкиСериализацииJSON=Неопределено) Экспорт
		
	Если ПараметрыЗаписиИлиЗаписьJson = Неопределено Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
	Иначе
		ТипПараметра = ТипЗнч(ПараметрыЗаписиИлиЗаписьJSON);
		Если ТипПараметра = Тип("ПараметрыЗаписиJSON") Тогда
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиИлиЗаписьJSON);
		ИначеЕсли ТипПараметра = Тип("ЗаписьJSON") Тогда
			ЗаписьJSON = ПараметрыЗаписиИлиЗаписьJSON;
		Иначе
			ВызватьИсключение "Недопустимое значение параметра.";
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиСериализацииJSON = Неопределено Тогда
		ЗаписатьJSON(ЗаписьJSON, Значение);
	Иначе
		ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализацииJSON);
	КонецЕсли;
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция JsonДесериализовать(СтрокаИлиЧтениеJSON, КакСоответствие=Неопределено) Экспорт
	
    ТипПараметра = ТипЗнч(СтрокаИлиЧтениеJSON);
	Если ТипПараметра = Тип("Строка") Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаИлиЧтениеJSON);
	ИначеЕсли ТипПараметра = Тип("ЧтениеJSON") Тогда
		ЧтениеJSON = СтрокаИлиЧтениеJSON;
	Иначе
		ВызватьИсключение "Недопустимое значение параметра.";
	КонецЕсли;
	
	Если КакСоответствие = Неопределено Тогда
		Результат = ПрочитатьJSON(ЧтениеJSON);
	Иначе
		Результат = ПрочитатьJSON(ЧтениеJSON, КакСоответствие);
	КонецЕсли;
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

#КонецОбласти

#Область СериализацияXML

#Если Не ВебКлиент Тогда

Функция XmlСериализовать(Значение, ОтступИлиЗаписьXML=Неопределено) Экспорт
	
	Если ОтступИлиЗаписьXML = Неопределено Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
	Иначе
	    ТипПараметра = ТипЗнч(ОтступИлиЗаписьXML);
		Если ТипПараметра = Тип("Булево") Тогда
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.Отступ = ОтступИлиЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
		ИначеЕсли ТипПараметра = Тип("ЗаписьXML") Тогда
			ЗаписьXML = ОтступИлиЗаписьXML;
		Иначе
			ВызватьИсключение "Недопустимое значение параметра.";
		КонецЕсли;
	КонецЕсли;
	
	XmlЗаписатьЗначение(ЗаписьXML, Значение);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции
Процедура XmlЗаписатьЗначение(ЗаписьXML, Значение)

	ТипЗнч = ТипЗнч(Значение);
	Если ТипЗнч = Тип("Структура") Или ТипЗнч = Тип("ФиксированнаяСтруктура") Тогда
	    XmlЗаписатьСтруктуру(ЗаписьXML, Значение);
	ИначеЕсли ТипЗнч = Тип("Соответствие") Или ТипЗнч = Тип("ФиксированноеСоответствие") Тогда
	    XmlЗаписатьСоответствие(ЗаписьXML, Значение);
	ИначеЕсли ТипЗнч = Тип("Массив") Или ТипЗнч = Тип("ФиксированныйМассив") Тогда
	    XmlЗаписатьМассив(ЗаписьXML, Значение);
#Если Сервер Или ТолстыйКлиент Или ВнешнееСоединение Тогда
	ИначеЕсли ТипЗнч = Тип("ТаблицаЗначений") Тогда
	    XmlЗаписатьТаблицуЗначений(ЗаписьXML, Значение);
#КонецЕсли
	Иначе
		ЗаписатьXML(ЗаписьXML, Значение);
	КонецЕсли;
	
КонецПроцедуры
Процедура XmlЗаписатьСтруктуру(ЗаписьXML, Структура)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("struct");
	
	Для Каждого КлючЗначение Из Структура Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("structItem");
		ЗаписьXML.ЗаписатьАтрибут("key", КлючЗначение.Ключ);
		
		XmlЗаписатьЗначение(ЗаписьXML, КлючЗначение.Значение);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры	
Процедура XmlЗаписатьСоответствие(ЗаписьXML, Соответствие)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("map");
	
	Для Каждого КлючЗначение Из Соответствие Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mapItem");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mapItemKey");
		XmlЗаписатьЗначение(ЗаписьXML, КлючЗначение.Ключ);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mapItemValue");
		XmlЗаписатьЗначение(ЗаписьXML, КлючЗначение.Значение);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры	
Процедура XmlЗаписатьМассив(ЗаписьXML, Массив)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("array");
	
	Для Каждого Элемент Из Массив Цикл
		XmlЗаписатьЗначение(ЗаписьXML, Элемент);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры	
#Если Сервер Или ТолстыйКлиент Или ВнешнееСоединение Тогда
Процедура XmlЗаписатьТаблицуЗначений(ЗаписьXML, ТаблицаЗначений)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("valueTable");
	
	Для Каждого КолонкаТаблицы Из ТаблицаЗначений.Колонки Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("column");
		ЗаписьXML.ЗаписатьАтрибут("name", КолонкаТаблицы.Имя);
		XmlЗаписатьЗначение(ЗаписьXML, КолонкаТаблицы.ТипЗначения);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	МаксИндексКолонки = ТаблицаЗначений.Колонки.Количество() - 1;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("row");
		Для ИндексКолонки = 0 По МаксИндексКолонки Цикл
			XmlЗаписатьЗначение(ЗаписьXML, СтрокаТаблицы[ИндексКолонки]);
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры	
#КонецЕсли

Функция XmlДесериализовать(СтрокаИлиЧтениеXML) Экспорт
	
    ТипПараметра = ТипЗнч(СтрокаИлиЧтениеXML);
	Если ТипПараметра = Тип("Строка") Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаИлиЧтениеXML);
	ИначеЕсли ТипПараметра = Тип("ЧтениеXML") Тогда
		ЧтениеXML = СтрокаИлиЧтениеXML;
	Иначе
		ВызватьИсключение "Недопустимое значение параметра.";
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	Результат = XmlПрочитатьЗначение(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции
Функция XmlПрочитатьЗначение(ЧтениеXML)
	
	Если ЧтениеXML.Имя = "struct" Тогда
		Значение = XmlПрочитатьСтруктуру(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "map" Тогда
		Значение = XmlПрочитатьСоответствие(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "array" Тогда
		Значение = XmlПрочитатьМассив(ЧтениеXML);	
	ИначеЕсли ЧтениеXML.Имя = "valueTable" Тогда
#Если Сервер Или ТолстыйКлиент Или ВнешнееСоединение Тогда
		Значение = XmlПрочитатьТаблицуЗначений(ЧтениеXML);
#Иначе
		ВызватьИсключение "Десериализация таблицы значений не поддерживается на данном типе клиента.";
#КонецЕсли
	Иначе
		Значение = ПрочитатьXML(ЧтениеXML);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции
Функция XmlПрочитатьСтруктуру(ЧтениеXML)
	
	Результат = Новый Структура;
	
	ЧтениеXML.Прочитать(); //потребим начало структуры
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		Ключ = ЧтениеXML.ПолучитьАтрибут(0);
		
		ЧтениеXML.Прочитать(); // потребим начало элемента значения
		Значение = XmlПрочитатьЗначение(ЧтениеXML);
		ЧтениеXML.Прочитать(); // потребим конец элемента значения
		
		Результат.Вставить(Ключ, Значение);
		
	КонецЦикла;
	
	ЧтениеXML.Прочитать(); // потребим конец структуры
		
	Возврат Результат;
	
КонецФункции
Функция XmlПрочитатьСоответствие(ЧтениеXML)
	
	Результат = Новый Соответствие;
	
	ЧтениеXML.Прочитать(); //потребим начало соответствия
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		ЧтениеXML.Прочитать(); // потребим начало элемента соответствия
		
		ЧтениеXML.Прочитать(); // потребим начало элемента ключа
		Ключ = XmlПрочитатьЗначение(ЧтениеXML);
		ЧтениеXML.Прочитать(); // потребим конец элемента ключа
		
		ЧтениеXML.Прочитать(); // потребим начало элемента значения
		Значение = XmlПрочитатьЗначение(ЧтениеXML);
		ЧтениеXML.Прочитать(); // потребим конец элемента значения
		
		ЧтениеXML.Прочитать(); // потребим конец элемента соответствия
		
		Результат.Вставить(Ключ, Значение);
		
	КонецЦикла;
	
	ЧтениеXML.Прочитать(); // потребим конец соответствия
		
	Возврат Результат;
	
КонецФункции
Функция XmlПрочитатьМассив(ЧтениеXML)
	
	Результат = Новый Массив;
	
	ЧтениеXML.Прочитать(); //потребим начало массива
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		Значение = XmlПрочитатьЗначение(ЧтениеXML);
		
		Результат.Добавить(Значение);
		
	КонецЦикла;
		
	ЧтениеXML.Прочитать(); // потребим конец массива
	
	Возврат Результат;
	
КонецФункции
#Если Сервер Или ТолстыйКлиент Или ВнешнееСоединение Тогда
Функция XmlПрочитатьТаблицуЗначений(ЧтениеXML)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ЧтениеXML.Прочитать(); //потребим начало таблицы
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		Если ЧтениеXML.Имя = "column" Тогда
			ИмяКолонки = ЧтениеXML.ПолучитьАтрибут("name");
			ЧтениеXML.Прочитать(); // потребим начало колонки
			ТипКолонки = XmlПрочитатьЗначение(ЧтениеXML);
			ТаблицаЗначений.Колонки.Добавить(ИмяКолонки, ТипКолонки);
			ЧтениеXML.Прочитать(); // потребим конец колонки
		ИначеЕсли ЧтениеXML.Имя = "row" Тогда
			СтрокаТаблицы = ТаблицаЗначений.Добавить();
			ЧтениеXML.Прочитать(); // потребим начало строки
			ИндексКолонки = 0;
			Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
				СтрокаТаблицы[ИндексКолонки] = XmlПрочитатьЗначение(ЧтениеXML);
				ИндексКолонки = ИндексКолонки + 1;
			КонецЦикла;
			ЧтениеXML.Прочитать(); // потребим конец строки
		Иначе
			ЧтениеXML.Пропустить();
		КонецЕсли;
		
	КонецЦикла;
		
	ЧтениеXML.Прочитать(); // потребим конец таблицы
	
	Возврат ТаблицаЗначений;
	
КонецФункции
#КонецЕсли

#КонецЕсли

#КонецОбласти

#Область СериализацияAvroAsXml

#Если Не ВебКлиент Тогда

Функция AvroСериализовать(Значение, Имя=Неопределено, ПространствоИмен=Неопределено, ОтступИлиЗаписьXML=Ложь) Экспорт
	
    ТипПараметра = ТипЗнч(ОтступИлиЗаписьXML);
	
	Если ТипПараметра = Тип("Булево") Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.Отступ = ОтступИлиЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
	ИначеЕсли ТипПараметра = Тип("ЗаписьXML") Тогда
		ЗаписьXML = ОтступИлиЗаписьXML;
	Иначе
		ВызватьИсключение "Недопустимое значение параметра.";
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	Если ЗначениеТип = Тип("Структура") Или ЗначениеТип = Тип("ФиксированнаяСтруктура") Тогда
		AvroЗаписатьRecord(ЗаписьXML, Значение, Имя, ПространствоИмен);
	Иначе
		ВызватьИсключение "Корневым элементом сериализовываемых данных может быть только значение типа ""Структура"" или ""Фиксированная структура"".";
	КонецЕсли;
		
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Процедура AvroЗаписатьЗначение(ЗаписьXML, Значение, Имя=Неопределено)

	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("Строка") Тогда
		
		AvroЗаписатьString(ЗаписьXML, Значение, Имя);
		
	ИначеЕсли ЗначениеТип = Тип("Число") Тогда
		
		AvroЗаписатьDecimal(ЗаписьXML, Значение, Имя);
		
	ИначеЕсли ЗначениеТип = Тип("Дата") Тогда
		
		AvroЗаписатьTimestampMillis(ЗаписьXML, Значение, Имя);
		
	ИначеЕсли ЗначениеТип = Тип("Булево") Тогда
		
		AvroЗаписатьBoolean(ЗаписьXML, Значение, Имя);
		
	ИначеЕсли ЗначениеТип = Тип("УникальныйИдентификатор") Тогда
		
		AvroЗаписатьUuid(ЗаписьXML, Значение, Имя);
		
	ИначеЕсли ЗначениеТип = Тип("ДвоичныеДанные") Тогда
		
		AvroЗаписатьBytes(ЗаписьXML, Значение, Имя);
		
	ИначеЕсли ЗначениеТип = Тип("Структура") Или ЗначениеТип = Тип("ФиксированнаяСтруктура") Тогда
		
		AvroЗаписатьRecord(ЗаписьXML, Значение, Имя);
		
	ИначеЕсли ЗначениеТип = Тип("Массив") Или ЗначениеТип = Тип("ФиксированныйМассив") Тогда
		
		AvroЗаписатьArray(ЗаписьXML, Значение, Имя);
		
	ИначеЕсли ЗначениеТип = Тип("Соответствие") Или ЗначениеТип = Тип("ФиксированноеСоответствие") Тогда
		
		AvroЗаписатьMap(ЗаписьXML, Значение, Имя);
		
#Если Сервер ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
			
	ИначеЕсли ЗначениеТип = Тип("ТаблицаЗначений") Тогда
	
		AvroЗаписатьТаблицуЗначений(ЗаписьXML, Значение, Имя);
		
	ИначеЕсли ЗначениеТип = Тип("РезультатЗапроса") Тогда
		
		AvroЗаписатьРезультатЗапроса(ЗаписьXML, Значение, Имя);
		
#КонецЕсли

	Иначе
		
		ВызватьИсключение "Передано значение некорректного типа: "+ЗначениеТип+".";
		
	КонецЕсли;
		
		
КонецПроцедуры

Процедура AvroЗаписатьRecord(ЗаписьXML, Структура, Имя, ПространствоИмен=Неопределено)
	
	Если Структура = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	AvroЗаписатьRecordНачало(ЗаписьXML, Имя, ПространствоИмен);
	
	Для Каждого КЗ Из Структура Цикл
		AvroЗаписатьЗначение(ЗаписьXML, КЗ.Значение, КЗ.Ключ);
	КонецЦикла;
	
	AvroЗаписатьRecordКонец(ЗаписьXML);
	
КонецПроцедуры

Процедура AvroЗаписатьArray(ЗаписьXML, Массив, Имя)
	
	Если Массив = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	AvroЗаписатьArrayНачало(ЗаписьXML, Имя);
	
	Для Каждого Элемент Из Массив Цикл
		AvroЗаписатьЗначение(ЗаписьXML, Элемент);
	КонецЦикла;
	
	AvroЗаписатьArrayКонец(ЗаписьXML);
	
КонецПроцедуры

Процедура AvroЗаписатьMap(ЗаписьXML, Соответствие, Имя)
	
	Если Соответствие = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	AvroЗаписатьMapНачало(ЗаписьXML, Имя);
	
	Для Каждого КЗ Из Соответствие Цикл
		AvroЗаписатьMapЭлемент(ЗаписьXML, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	AvroЗаписатьMapКонец(ЗаписьXML);
	
КонецПроцедуры

Процедура AvroЗаписатьNull(ЗаписьXML, Имя=Неопределено) Экспорт
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("null");
	Если Имя <> Неопределено  Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьBoolean(ЗаписьXML, Значение, Имя=Неопределено) Экспорт
	
	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("Булево") Тогда
		ЗначениеБулево = Значение;
	Иначе
		ВызватьИсключение "Передано значение некорректного типа: """+ЗначениеТип+""".";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("boolean");
	Если Имя <> Неопределено  Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ЗначениеБулево));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьInt(ЗаписьXML, Значение, Имя=Неопределено) Экспорт
	
	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("Число") Тогда
		ЗначениеЧисло = Окр(Значение);
	Иначе
		ВызватьИсключение "Передано значение некорректного типа: """+ЗначениеТип+""".";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("int");
	Если Имя <> Неопределено  Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ЗначениеЧисло));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьLong(ЗаписьXML, Значение, Имя=Неопределено) Экспорт
	
	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("Число") Тогда
		ЗначениеЧисло = Окр(Значение);
	Иначе
		ВызватьИсключение "Передано значение некорректного типа: """+ЗначениеТип+""".";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("long");
	Если Имя <> Неопределено  Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ЗначениеЧисло));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьString(ЗаписьXML, Значение, Имя=Неопределено) Экспорт
	
	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("Строка") Тогда
		ЗначениеСтрока = Значение;
	Иначе
		ВызватьИсключение "Передано значение некорректного типа: """+ЗначениеТип+""".";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("string");
	Если Имя <> Неопределено  Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
	ЗаписьXML.ЗаписатьТекст(ЗначениеСтрока);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьBytes(ЗаписьXML, Значение, Имя=Неопределено) Экспорт
	
	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("ДвоичныеДанные") Тогда
		ЗначениеСтрока = ПолучитьBase64СтрокуИзДвоичныхДанных(Значение);
	ИначеЕсли ЗначениеТип = Тип("БуферДвоичныхДанных") Тогда
		ЗначениеСтрока = ПолучитьBase64СтрокуИзБуфераДвоичныхДанных(Значение);
	Иначе
		ВызватьИсключение "Передано значение некорректного типа: """+ЗначениеТип+""".";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("bytes");
	Если Имя <> Неопределено  Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
	ЗаписьXML.ЗаписатьТекст(ЗначениеСтрока);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьRecordНачало(ЗаписьXML, Имя=Неопределено, ПространствоИмен=Неопределено) Экспорт
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("record");
	
	Если Имя <> Неопределено Тогда 
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
	
	Если ПространствоИмен <> Неопределено Тогда 
		ЗаписьXML.ЗаписатьАтрибут("namespace", ПространствоИмен);
	КонецЕсли;
	
КонецПроцедуры
Процедура AvroЗаписатьRecordКонец(ЗаписьXML) Экспорт
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьEnum(ЗаписьXML, Значение, Имя=Неопределено, ПространствоИмен=Неопределено) Экспорт
	
	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("Строка") Тогда
		ЗначениеСтрока = Значение;
	Иначе
		ВызватьИсключение "Передано значение некорректного типа: """+ЗначениеТип+""".";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("enum");
	
	Если Имя <> Неопределено  Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
	
	Если ПространствоИмен <> Неопределено Тогда 
		ЗаписьXML.ЗаписатьАтрибут("namespase", ПространствоИмен);
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьТекст(ЗначениеСтрока);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьArrayНачало(ЗаписьXML, Имя=Неопределено) Экспорт
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("array");
	
	Если Имя <> Неопределено Тогда 
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
		
КонецПроцедуры
Процедура AvroЗаписатьArrayКонец(ЗаписьXML) Экспорт
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьMapНачало(ЗаписьXML, Имя=Неопределено) Экспорт
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("map");
	
	Если Имя <> Неопределено Тогда 
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
		
КонецПроцедуры
Процедура AvroЗаписатьMapЭлемент(ЗаписьXML, Ключ, Значение) Экспорт
	
	КлючТип = ТипЗнч(Ключ);
	Если КлючТип <> Тип("Строка") Тогда
		ВызватьИсключение "Передан ключ некорректного типа: """+КлючТип+""".";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("mapItem");
	ЗаписьXML.ЗаписатьАтрибут("key", Ключ);
	
	AvroЗаписатьЗначение(ЗаписьXML, Значение);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры
Процедура AvroЗаписатьMapКонец(ЗаписьXML) Экспорт
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьFixed(ЗаписьXML, Значение, Имя=Неопределено, ПространствоИмен=Неопределено) Экспорт
	
	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("ДвоичныеДанные") Тогда
		ЗначениеСтрока = ПолучитьBase64СтрокуИзДвоичныхДанных(Значение);
	ИначеЕсли ЗначениеТип = Тип("БуферДвоичныхДанных") Тогда
		ЗначениеСтрока = ПолучитьBase64СтрокуИзБуфераДвоичныхДанных(Значение);
	Иначе
		ВызватьИсключение "Передано значение некорректного типа: """+ЗначениеТип+""".";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("fixed");
	
	Если Имя <> Неопределено  Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
	
	Если ПространствоИмен <> Неопределено Тогда 
		ЗаписьXML.ЗаписатьАтрибут("namespase", ПространствоИмен);
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьТекст(ЗначениеСтрока);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьDecimal(ЗаписьXML, Значение, Имя=Неопределено) Экспорт
	
	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("Число") Тогда
		ЗначениеЧисло = Значение;
	Иначе
		ВызватьИсключение "Передано значение некорректного типа: """+ЗначениеТип+""".";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("decimal");
	Если Имя <> Неопределено Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ЗначениеЧисло));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьUuid(ЗаписьXML, Значение, Имя=Неопределено) Экспорт
	
	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("УникальныйИдентификатор") Тогда
		ЗначениеUUID = Значение;
	Иначе
		ВызватьИсключение "Передано значение некорректного типа: """+ЗначениеТип+""".";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("uuid");
	Если Имя <> Неопределено  Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ЗначениеUUID));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьDate(ЗаписьXML, Значение, Имя=Неопределено) Экспорт
	
	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("Дата") Тогда
		ЗначениеДата = Значение;
	Иначе
		ВызватьИсключение "Передано значение некорректного типа: """+ЗначениеТип+""".";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("date");
	Если Имя <> Неопределено  Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
	ЗаписьXML.ЗаписатьТекст(Формат(ЗначениеДата, "ДФ=yyyy-MM-dd; ДП=0001-01-01"));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьTimestampMillis(ЗаписьXML, Значение, Имя=Неопределено) Экспорт
	
	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("Дата") Тогда
		ЗначениеСтрока = XMLСтрока(Значение);
	ИначеЕсли ЗначениеТип = Тип("Число") Тогда // количество миллисекунд, начиная с 01.01.0001 00:00:00 UTC
		Миллисекунды = Цел(Значение % 1000);
		ЗначениеДата = '00010101' + Цел(Значение/1000);
		ЗначениеДата = МестноеВремя(ЗначениеДата);
		ЗначениеСтрока = XMLСтрока(ЗначениеДата);
		Если Миллисекунды <> 0 Тогда
			ЗначениеСтрока = ЗначениеСтрока+Формат(Миллисекунды, "ЧЦ=3; ЧВН=; ЧГ=0; ЧФ=.Ч");
		КонецЕсли;
	Иначе
		ВызватьИсключение "Передано значение некорректного типа: """+ЗначениеТип+""".";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("timestamp-millis");
	Если Имя <> Неопределено  Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
	ЗаписьXML.ЗаписатьТекст(ЗначениеСтрока);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура AvroЗаписатьTimestampMicros(ЗаписьXML, Значение, Имя=Неопределено) Экспорт
	
	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("Дата") Тогда
		ЗначениеДата = Значение;
	ИначеЕсли ЗначениеТип = Тип("Число") Тогда // количество микросекунд, начиная с 01.01.0001 00:00:00 UTC
		Микросекунды = Цел(Значение % 1000000);
		ЗначениеДата = '00010101' + Цел(Значение/1000000);
		ЗначениеДата = МестноеВремя(ЗначениеДата);
		ЗначениеСтрока = XMLСтрока(ЗначениеДата);
		Если Микросекунды <> 0 Тогда
			ЗначениеСтрока = ЗначениеСтрока+"."+Формат(Микросекунды, "ЧЦ=6; ЧВН=; ЧГ=0; ЧФ=.Ч");
		КонецЕсли;
	Иначе
		ВызватьИсключение "Передано значение некорректного типа: """+ЗначениеТип+""".";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("timestamp-micros");
	Если Имя <> Неопределено  Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	КонецЕсли;
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ЗначениеДата));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

#Если Сервер ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

Процедура AvroЗаписатьТаблицуЗначений(ЗаписьXML, Значение, Имя=Неопределено) Экспорт
	
	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("ТаблицаЗначений") Тогда
		ТаблицаЗначений = Значение;
	Иначе
		ВызватьИсключение "Передано значение некорректного типа: """+ЗначениеТип+""".";
	КонецЕсли;
	
	Колонки = ТаблицаЗначений.Колонки;
	
	AvroЗаписатьArrayНачало(ЗаписьXML, Имя);
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		
		AvroЗаписатьRecordНачало(ЗаписьXML);
		
		Для Каждого Колонка Из Колонки Цикл
			AvroЗаписатьЗначение(ЗаписьXML, Строка[Колонка.Имя], Колонка.Имя);
		КонецЦикла;
		
		AvroЗаписатьRecordКонец(ЗаписьXML);
		
	КонецЦикла;
	
	AvroЗаписатьArrayКонец(ЗаписьXML);
	
КонецПроцедуры

Процедура AvroЗаписатьРезультатЗапроса(ЗаписьXML, Значение, Имя=Неопределено) Экспорт
	
	Если Значение = Неопределено Тогда
		AvroЗаписатьNull(ЗаписьXML, Имя);
		Возврат;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	
	Если ЗначениеТип = Тип("РезультатЗапроса") Тогда
		РезультатЗапроса = Значение;
	Иначе
		ВызватьИсключение "Передано значение некорректного типа: """+ЗначениеТип+""".";
	КонецЕсли;
	
	Колонки = РезультатЗапроса.Колонки;
	
	AvroЗаписатьArrayНачало(ЗаписьXML, Имя);
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		AvroЗаписатьRecordНачало(ЗаписьXML);
		
		Для Каждого Колонка Из Колонки Цикл
			AvroЗаписатьЗначение(ЗаписьXML, Выборка[Колонка.Имя], Колонка.Имя);
		КонецЦикла;
		
		AvroЗаписатьRecordКонец(ЗаписьXML);
		
	КонецЦикла;
	
	AvroЗаписатьArrayКонец(ЗаписьXML);
	
КонецПроцедуры

#КонецЕсли

#КонецЕсли

#КонецОбласти

#Область ДесериализацияAvroAsXml

#Если Не ВебКлиент Тогда

Функция AvroДесериализовать(СтрокаИлиЧтениеXML, Имя=Неопределено, ПространствоИмен=Неопределено) Экспорт
	
	Если СтрокаИлиЧтениеXML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
    ТипПараметра = ТипЗнч(СтрокаИлиЧтениеXML);
	Если ТипПараметра = Тип("Строка") Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаИлиЧтениеXML);
	ИначеЕсли ТипПараметра = Тип("ЧтениеXML") Тогда
		ЧтениеXML = СтрокаИлиЧтениеXML;
	Иначе
		ВызватьИсключение "Недопустимое значение параметра.";
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Имя = ЧтениеXML.ПолучитьАтрибут("name");
	ПространствоИмен = ЧтениеXML.ПолучитьАтрибут("namespace");
	
	Результат = AvroПрочитатьЗначение(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция AvroПрочитатьЗначение(ЧтениеXML)
	
	Если ЧтениеXML.Имя = "decimal" Тогда
		
		Значение = AvroПрочитатьDecimal(ЧтениеXML);
		
	ИначеЕсли ЧтениеXML.Имя = "uuid" Тогда
		
		Значение = AvroПрочитатьUuid(ЧтениеXML);
		
	ИначеЕсли ЧтениеXML.Имя = "record" Тогда
		
		Значение = AvroПрочитатьRecord(ЧтениеXML);
		
	ИначеЕсли ЧтениеXML.Имя = "string" Тогда
		
		Значение = AvroПрочитатьString(ЧтениеXML);
				
	ИначеЕсли ЧтениеXML.Имя = "int" Тогда
		
		Значение = AvroПрочитатьInt(ЧтениеXML);
		
	ИначеЕсли ЧтениеXML.Имя = "long" Тогда
		
		Значение = AvroПрочитатьLong(ЧтениеXML);
		
	ИначеЕсли ЧтениеXML.Имя = "date" Тогда
		
		Значение = AvroПрочитатьDate(ЧтениеXML);
				
	ИначеЕсли ЧтениеXML.Имя = "timestamp-millis" Тогда
		
		Значение = AvroПрочитатьTimestampMillis(ЧтениеXML);
		
	ИначеЕсли ЧтениеXML.Имя = "timestamp-micros" Тогда
		
		Значение = AvroПрочитатьTimestampMicros(ЧтениеXML);
				
	ИначеЕсли ЧтениеXML.Имя = "boolean" Тогда
		
		Значение = AvroПрочитатьBoolean(ЧтениеXML);
		
	ИначеЕсли ЧтениеXML.Имя = "enum" Тогда
		
		Значение = AvroПрочитатьEnum(ЧтениеXML);
		
	ИначеЕсли ЧтениеXML.Имя = "fixed" Тогда
		
		Значение = AvroПрочитатьFixed(ЧтениеXML);
		
	ИначеЕсли ЧтениеXML.Имя = "bytes" Тогда
		
		Значение = AvroПрочитатьBytes(ЧтениеXML);
				
	ИначеЕсли ЧтениеXML.Имя = "array" Тогда
		
		Значение = AvroПрочитатьArray(ЧтениеXML);
		
	ИначеЕсли ЧтениеXML.Имя = "map" Тогда
		
		Значение = AvroПрочитатьMap(ЧтениеXML);	
		
	ИначеЕсли ЧтениеXML.Имя = "null" Тогда
		
		Значение = AvroПрочитатьNull(ЧтениеXML);
		
	Иначе
		
		ВызватьИсключение "Неизвестный тип Avro: """+ЧтениеXML.Имя+""".";
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция AvroПрочитатьBoolean(ЧтениеXML)
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Значение = XMLЗначение(Тип("Булево"), ЧтениеXML.Значение);
		ЧтениеXML.Прочитать();
	Иначе
		Значение = Ложь;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция AvroПрочитатьInt(ЧтениеXML)
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Значение = XMLЗначение(Тип("Число"), ЧтениеXML.Значение);
		ЧтениеXML.Прочитать();
	Иначе
		Значение = 0;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция AvroПрочитатьLong(ЧтениеXML)
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Значение = XMLЗначение(Тип("Число"), ЧтениеXML.Значение);
		ЧтениеXML.Прочитать();
	Иначе
		Значение = 0;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция AvroПрочитатьBytes(ЧтениеXML)
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда		
		ЗначениеСтрока = ЧтениеXML.Значение;
		ЧтениеXML.Прочитать();
	Иначе
		ЗначениеСтрока = "";
	КонецЕсли;
	
	Значение = ПолучитьДвоичныеДанныеИзBase64Строки(ЗначениеСтрока);
		
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция AvroПрочитатьString(ЧтениеXML)
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Значение = ЧтениеXML.Значение;
		ЧтениеXML.Прочитать();
	Иначе
		Значение = "";
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция AvroПрочитатьRecord(ЧтениеXML)
	
	Результат = Новый Структура;
	
	ЧтениеXML.Прочитать(); //потребим начало структуры
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		Ключ = ЧтениеXML.ПолучитьАтрибут("name");
		
		Значение = AvroПрочитатьЗначение(ЧтениеXML);
		
		Результат.Вставить(Ключ, Значение);
		
	КонецЦикла;
	
	ЧтениеXML.Прочитать(); // потребим конец структуры
		
	Возврат Результат;
	
КонецФункции

Функция AvroПрочитатьEnum(ЧтениеXML)
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда		
		Значение = ЧтениеXML.Значение;
		ЧтениеXML.Прочитать();
	Иначе
		Значение = "";
	КонецЕсли;
		
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция AvroПрочитатьArray(ЧтениеXML)
	
	Результат = Новый Массив;
	
	ЧтениеXML.Прочитать(); //потребим начало массива
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		Значение = AvroПрочитатьЗначение(ЧтениеXML);
		
		Результат.Добавить(Значение);
		
	КонецЦикла;
		
	ЧтениеXML.Прочитать(); // потребим конец массива
	
	Возврат Результат;
	
КонецФункции

Функция AvroПрочитатьMap(ЧтениеXML)
	
	Результат = Новый Соответствие;
	
	ЧтениеXML.Прочитать(); //потребим начало соответствия
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		Ключ = ЧтениеXML.ПолучитьАтрибут(0);
		
		ЧтениеXML.Прочитать(); // потребим начало элемента значения
		Значение = AvroПрочитатьЗначение(ЧтениеXML);
		ЧтениеXML.Прочитать(); // потребим конец элемента значения
		
		Результат.Вставить(Ключ, Значение);
		
	КонецЦикла;
	
	ЧтениеXML.Прочитать(); // потребим конец соответствия
		
	Возврат Результат;
	
КонецФункции

Функция AvroПрочитатьFixed(ЧтениеXML)
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда		
		ЗначениеСтрока = ЧтениеXML.Значение;
		ЧтениеXML.Прочитать();
	Иначе
		ЗначениеСтрока = "";
	КонецЕсли;
	
	Значение = ПолучитьДвоичныеДанныеИзBase64Строки(ЗначениеСтрока);
		
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция AvroПрочитатьDecimal(ЧтениеXML)
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Значение = XMLЗначение(Тип("Число"), ЧтениеXML.Значение);
		ЧтениеXML.Прочитать();
	Иначе
		Значение = 0;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция AvroПрочитатьUuid(ЧтениеXML)
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Значение = Новый УникальныйИдентификатор(ЧтениеXML.Значение);
		ЧтениеXML.Прочитать();
	Иначе
		Значение = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция AvroПрочитатьDate(ЧтениеXML)
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Значение = XMLЗначение(Тип("Дата"), ЧтениеXML.Значение);
		ЧтениеXML.Прочитать();
	Иначе
		Значение = '00010101';
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция AvroПрочитатьTimestampMillis(ЧтениеXML)
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Значение = XMLЗначение(Тип("Дата"), ЧтениеXML.Значение);
		ЧтениеXML.Прочитать();
	Иначе
		Значение = '00010101';
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция AvroПрочитатьTimestampMicros(ЧтениеXML)
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Значение = XMLЗначение(Тип("Дата"), ЧтениеXML.Значение);
		ЧтениеXML.Прочитать();
	Иначе
		Значение = '00010101';
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

Функция AvroПрочитатьNull(ЧтениеXML)
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		ЧтениеXML.Прочитать();
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Неопределено;
	
КонецФункции

#КонецЕсли

#КонецОбласти

#Область РаботаСоСхемамиAvro

#Если Не ВебКлиент Тогда

Процедура AvroСхемаПолучитьИмяПространствоИмен(Схема, Имя, ПространствоИмен=Неопределено) Экспорт
	
	СхемаТип = ТипЗнч(Схема);
	Если СхемаТип = Тип("Строка") Тогда
		Schema = JsonДесериализовать(Схема, Ложь);
	ИначеЕсли СхемаТип = Тип("Структура") Или СхемаТип = Тип("ФиксированнаяСтруктура") Тогда
		Schema = Схема;
	Иначе
		ВызватьИсключение "Передан некорректный параметр: ""Схема"".";
	КонецЕсли;
	
	Имя = Schema.name;
	ПространствоИмен = Schema.namespace;
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти