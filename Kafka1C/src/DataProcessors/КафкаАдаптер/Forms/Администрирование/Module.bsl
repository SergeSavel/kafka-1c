// Copyright 2023 Савельев Сергей Владимирович
//
// Лицензировано согласно Лицензии Apache, Версия 2.0 ("Лицензия");
// вы можете использовать этот файл только в соответствии с Лицензией.
// Вы можете найти копию Лицензии по адресу
//
// http://www.apache.org/licenses/LICENSE-2.0.
//
// За исключением случаев, когда это регламентировано существующим
// законодательством, или если это не оговорено в письменном соглашении,
// программное обеспечение, распространяемое на условиях данной Лицензии,
// предоставляется "КАК ЕСТЬ", и любые явные или неявные ГАРАНТИИ ОТВЕРГАЮТСЯ.
// Информацию об основных правах и ограничениях, применяемых к определенному
// языку согласно Лицензии, вы можете найти в данной Лицензии.

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВерсияПодсистемы = КафкаКлиентСервер.ВерсияПодсистемы();
	
	Кластер = Справочники.КафкаКластеры.ПоУмолчанию;
	
	КонтрольДоступаПриСозданииНаСервере();
	
КонецПроцедуры

#Область Метаданные

&НаКлиенте
Процедура МетаданныеПолучить(Команда)
	
	МетаданныеРезультат = Неопределено;
	
	МетаданныеПолучитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура МетаданныеПолучитьНаСервере()
	
	Кафка = РеквизитФормыВЗначение("Объект");
	Кафка.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
		
	Конфигурация = КафкаСервер.КонфигурацияБазовая(Кластер);
	Admin = Кафка.AdminCreate("Кафка1С.Администрирование", Конфигурация);
	
	Если Admin <> Неопределено Тогда
		Попытка
			Если ПустаяСтрока(МетаданныеТема) Тогда
				Результат = Кафка.AdminGetMetadata(Admin.Id, Admin.Token);
			Иначе
				Результат = Кафка.AdminGetMetadata(Admin.Id, Admin.Token, МетаданныеТема);
			КонецЕсли;
			Кафка.AdminRelease(Admin.Id, Admin.Token);
		Исключение
			Кафка.AdminRelease(Admin.Id, Admin.Token);
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	МетаданныеРезультат = СтрокаJSON(Результат);
	
	ЗначениеВРеквизитФормы(Кафка, "Объект");
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиБрокера

&НаКлиенте
Процедура НастройкиБрокераПолучить(Команда)
	
	НастройкиБрокераТаблица.Очистить();
	
	НастройкиБрокераПолучитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НастройкиБрокераПолучитьНаСервере()
	
	НастройкиБрокераТаблица.Очистить();
		
	Кафка = РеквизитФормыВЗначение("Объект");
	Кафка.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
		
	Конфигурация = КафкаСервер.КонфигурацияБазовая(Кластер);
	Admin = Кафка.AdminCreate("Кафка1С.Администрирование", Конфигурация);
	
	Если Admin <> Неопределено Тогда
		Попытка
			Результат = Кафка.AdminGetBrokerConfig(Admin.Id, Admin.Token, НастройкиБрокераБрокер);
			Кафка.AdminRelease(Admin.Id, Admin.Token);
		Исключение
			Кафка.AdminRelease(Admin.Id, Admin.Token);
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Кафка, "Объект");
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КЗ Из Результат Цикл
		Если НРег(КЗ.Ключ) = "entries" Тогда
			Entries = КЗ.Значение;
			Для Каждого КЗ2 Из Entries Цикл
				С = НастройкиБрокераТаблица.Добавить();
				С.Name = КЗ2.Ключ;
				Для Каждого КЗ3 Из КЗ2.Значение Цикл
					Если НРег(КЗ3.Ключ) = "value" Тогда
						С.Value = КЗ3.Значение;
					ИначеЕсли НРег(КЗ3.Ключ) = "isdefault" Тогда
						С.IsDefault = КЗ3.Значение;
					ИначеЕсли НРег(КЗ3.Ключ) = "isreadonly" Тогда
						С.IsReadOnly = КЗ3.Значение;
					ИначеЕсли НРег(КЗ3.Ключ) = "issensitive" Тогда
						С.IsSensitive = КЗ3.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиБрокераТолькоИзмененные(Команда)

	Элементы.НастройкиБрокераТолькоИзмененные.Пометка = Не Элементы.НастройкиБрокераТолькоИзмененные.Пометка;
	
	Если Элементы.НастройкиБрокераТолькоИзмененные.Пометка Тогда
		Элементы.НастройкиБрокераТаблица.ОтборСтрок = Новый ФиксированнаяСтруктура("IsDefault", Ложь);
	Иначе
		Элементы.НастройкиБрокераТаблица.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиТемы

&НаКлиенте
Процедура НастройкиТемыПолучить(Команда)
	
	НастройкиТемыТаблица.Очистить();
	
	НастройкиТемыПолучитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НастройкиТемыПолучитьНаСервере()

	НастройкиТемыТаблица.Очистить();
	
	Если ПустаяСтрока(НастройкиТемыТема) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Поле = "НастройкиТемыТема";
		Сообщение.Текст = "Необходимо заполнить тему.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Кафка = РеквизитФормыВЗначение("Объект");
	Кафка.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
		
	Конфигурация = КафкаСервер.КонфигурацияБазовая(Кластер);
	Admin = Кафка.AdminCreate("Кафка1С.Администрирование", Конфигурация);
	
	Если Admin <> Неопределено Тогда
		Попытка
			Результат = Кафка.AdminGetTopicConfig(Admin.Id, Admin.Token, НастройкиТемыТема);
			Кафка.AdminRelease(Admin.Id, Admin.Token);
		Исключение
			Кафка.AdminRelease(Admin.Id, Admin.Token);
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Кафка, "Объект");
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КЗ Из Результат Цикл
		Если НРег(КЗ.Ключ) = "entries" Тогда
			Entries = КЗ.Значение;
			Для Каждого КЗ2 Из Entries Цикл
				С = НастройкиТемыТаблица.Добавить();
				С.Name = КЗ2.Ключ;
				Для Каждого КЗ3 Из КЗ2.Значение Цикл
					Если НРег(КЗ3.Ключ) = "value" Тогда
						С.Value = КЗ3.Значение;
					ИначеЕсли НРег(КЗ3.Ключ) = "isdefault" Тогда
						С.IsDefault = КЗ3.Значение;
					ИначеЕсли НРег(КЗ3.Ключ) = "isreadonly" Тогда
						С.IsReadOnly = КЗ3.Значение;
					ИначеЕсли НРег(КЗ3.Ключ) = "issensitive" Тогда
						С.IsSensitive = КЗ3.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТемыТолькоИзмененные(Команда)

	Элементы.НастройкиТемыТолькоИзмененные.Пометка = Не Элементы.НастройкиТемыТолькоИзмененные.Пометка;
	
	Если Элементы.НастройкиТемыТолькоИзмененные.Пометка Тогда
		Элементы.НастройкиТемыТаблица.ОтборСтрок = Новый ФиксированнаяСтруктура("IsDefault", Ложь);
	Иначе
		Элементы.НастройкиТемыТаблица.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольДоступа

&НаСервере
Процедура КонтрольДоступаПриСозданииНаСервере()
	
	Кафка = РеквизитФормыВЗначение("Объект");
	
	AclBindingFilter = Кафка.NewAclBindingFilter();
	КонтрольДоступаФильтрResourceType = AclBindingFilter.PatternFilter.ResourceType;
	КонтрольДоступаФильтрResourceName = AclBindingFilter.PatternFilter.Name;
	КонтрольДоступаФильтрResourcePatternType = AclBindingFilter.PatternFilter.PatternType;
	
	КонтрольДоступаОбновитьИсходныеЗначенияШапки();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДоступаПрочитатьПравила(Команда)
	
	Успех = КонтрольДоступаПрочитатьПравилаНаСервере();
	
	Если Не Успех Тогда
		ПоказатьПредупреждение(, "Не удалось получить правила групп доступа.
		|Подробности в описании ошибки.");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КонтрольДоступаПрочитатьПравилаНаСервере()
	
	Успех = Ложь;
	
	Кафка = РеквизитФормыВЗначение("Объект");
	Кафка.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
	
	Конфигурация = КафкаСервер.КонфигурацияБазовая(Кластер);
	Admin = Кафка.AdminCreate("Кафка1С.Администрирование", Конфигурация);
	
	Если Admin <> Неопределено Тогда
		Попытка
			Успех = КонтрольДоступаПрочитатьПравилаНаСервере2(Кафка, Admin);
			Кафка.AdminRelease(Admin.Id, Admin.Token);
		Исключение
			Кафка.AdminRelease(Admin.Id, Admin.Token);
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Кафка, "Объект");
	
	Возврат Успех;
	
КонецФункции
&НаСервере
Функция КонтрольДоступаПрочитатьПравилаНаСервере2(Кафка, Admin)
		
	КонтрольДоступаПравила.Очистить();
	
	AclBindingFilter = Кафка.NewAclBindingFilter(
		КонтрольДоступаФильтрResourceType,
		КонтрольДоступаФильтрResourceName,
		КонтрольДоступаФильтрResourcePatternType
	);
	
	AclBindings = Кафка.AdminDescribeAcls(Admin.Id, Admin.Token, AclBindingFilter);
	
	Если AclBindings = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого AclBinding Из AclBindings Цикл
		
		Строка = КонтрольДоступаПравила.Добавить();
		
		Строка.ResourceType			= AclBinding.Pattern.ResourceType;
		Строка.ResourceName			= AclBinding.Pattern.Name;
		Строка.ResourcePatternType	= AclBinding.Pattern.PatternType;
		
		Строка.EntryPrincipal	= AclBinding.Entry.Principal;
		Строка.EntryHost		= AclBinding.Entry.Host;
		Строка.EntryOperation	= AclBinding.Entry.Operation;
		Строка.EntryPermission	= AclBinding.Entry.Permission;
		
		КонтрольДоступаОбновитьИсходныеЗначенияСтроки(Строка);
		
	КонецЦикла;
	
	КонтрольДоступаОбновитьИсходныеЗначенияШапки();
	
	Элементы.КонтрольДоступаПравила.ТолькоПросмотр = Ложь;
	Элементы.КонтрольДоступаЗаписатьПравила.Доступность = Истина;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура КонтрольДоступаЗаписатьПравила(Команда)
	
	Успех = КонтрольДоступаЗаписатьПравилаНаСервере();
	
	Если Не Успех Тогда
		ПоказатьПредупреждение(, "Не удалось записать правила групп доступа.
		|Подробности в описании ошибки.");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КонтрольДоступаЗаписатьПравилаНаСервере()
	
	Успех = Ложь;
	
	Кафка = РеквизитФормыВЗначение("Объект");
	Кафка.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
	
	Конфигурация = КафкаСервер.КонфигурацияБазовая(Кластер);
	Admin = Кафка.AdminCreate("Кафка1С.Администрирование", Конфигурация);
	
	Если Admin <> Неопределено Тогда
		Попытка
			
			Успех = КонтрольДоступаЗаписатьПравилаНаСервере2(Кафка, Admin);
			
			//Если Успех Тогда
			//	КонтрольДоступаПрочитатьПравилаНаСервере2(Кафка, Admin);
			//КонецЕсли;
			
			Кафка.AdminRelease(Admin.Id, Admin.Token);
		Исключение
			Кафка.AdminRelease(Admin.Id, Admin.Token);
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Кафка, "Объект");
	
	Возврат Успех;
	
КонецФункции
&НаСервере
Функция КонтрольДоступаЗаписатьПравилаНаСервере2(Кафка, Admin)
	
	ИндексСтроки = 0;
	
	Пока ИндексСтроки < КонтрольДоступаПравила.Количество() Цикл
		
		Строка = КонтрольДоступаПравила[ИндексСтроки];
		
		Если Строка.Удалить Тогда
			
			AclBindingFilter = Кафка.NewAclBindingFilter(
				Строка.ResourceTypeИсходный,
				Строка.ResourceNameИсходный,
				Строка.ResourcePatternTypeИсходный,
				Строка.EntryPrincipalИсходный,
				Строка.EntryHostИсходный,
				Строка.EntryOperationИсходный,
				Строка.EntryPermissionИсходный
			);
			
			AclBindingFilters = Новый Массив;
			AclBindingFilters.Добавить(AclBindingFilter);
			
			Results = Кафка.AdminDeleteAcls(Admin.Id, Admin.Token, AclBindingFilters);
			
			Если Results = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Строка.Удалить = Ложь;
			
			Если Не Строка.Добавить Тогда
				КонтрольДоступаПравила.Удалить(Строка);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Строка.Добавить Тогда
			
			AclBinding = Кафка.NewAclBinding(
				Строка.ResourceType,
				Строка.ResourceName,
				Строка.ResourcePatternType,
				Строка.EntryPrincipal,
				Строка.EntryHost,
				Строка.EntryOperation,
				Строка.EntryPermission
			);
			
			AclBindings = Новый Массив;
			AclBindings.Добавить(AclBinding);
			
			Result = Кафка.AdminCreateAcls(Admin.Id, Admin.Token, AclBindings);
			
			Если Result = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Строка.Добавить = Ложь;
			
			КонтрольДоступаОбновитьИсходныеЗначенияСтроки(Строка);
			
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	//Элементы.КонтрольДоступаЗаписатьПравила.Доступность = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура КонтрольДоступаПравилаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные; 
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.Добавить = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДоступаПравилаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Не ТекущиеДанные.Добавить И Не ТекущиеДанные.Удалить Тогда
		
		// эта строка не модифицировалась
		ТекущиеДанные.Добавить = Истина;
		ТекущиеДанные.Удалить = Истина;
		
	ИначеЕсли ТекущиеДанные.Добавить И ТекущиеДанные.Удалить Тогда
		
		// это модифицированная строка, все нужные флаги уже есть
		
	ИначеЕсли ТекущиеДанные.Добавить И Не ТекущиеДанные.Удалить Тогда
		
		// это новая строка, менять флаги не нужно
		
	Иначе
		ВызватьИсключение "Неожиданное состояние.";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДоступаПравилаПередУдалением(Элемент, Отказ)
		
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Не ТекущиеДанные.Добавить И Не ТекущиеДанные.Удалить Тогда
		
		// эта строка не модифицировалась
		Отказ = Истина;
		ТекущиеДанные.Удалить = Истина;
		
	ИначеЕсли ТекущиеДанные.Добавить И ТекущиеДанные.Удалить Тогда
		
		// это модифицированная строка
		Отказ = Истина;
		ТекущиеДанные.Добавить = Ложь;
		ТекущиеДанные.Удалить = Истина;
		КонтрольДоступаВосстановитьИсходныеЗначенияСтроки(ТекущиеДанные);
		
	ИначеЕсли Не ТекущиеДанные.Добавить И ТекущиеДанные.Удалить Тогда
		
		// это ранее помеченная на удаление строка
		Отказ = Истина;
		ТекущиеДанные.Удалить = Ложь;
		
	ИначеЕсли ТекущиеДанные.Добавить И Не ТекущиеДанные.Удалить Тогда
		
		// это новая строка, ее можно просто удалить
		
	Иначе
		ВызватьИсключение "Неожиданное состояние.";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрольДоступаОбновитьИсходныеЗначенияШапки()
	
	КонтрольДоступаФильтрResourceTypeИсходный = КонтрольДоступаФильтрResourceType;
	КонтрольДоступаФильтрResourceNameИсходный = КонтрольДоступаФильтрResourceName;
	КонтрольДоступаФильтрResourcePatternTypeИсходный = КонтрольДоступаФильтрResourcePatternType;
	
КонецПроцедуры

&НаСервере
Процедура КонтрольДоступаВосстановитьИсходныеЗначенияШапки()
	
	КонтрольДоступаФильтрResourceType = КонтрольДоступаФильтрResourceTypeИсходный;
	КонтрольДоступаФильтрResourceName = КонтрольДоступаФильтрResourceNameИсходный;
	КонтрольДоступаФильтрResourcePatternType = КонтрольДоступаФильтрResourcePatternTypeИсходный;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КонтрольДоступаОбновитьИсходныеЗначенияСтроки(Строка)
	
	Строка.ResourceTypeИсходный = Строка.ResourceType;
	Строка.ResourceNameИсходный = Строка.ResourceName;
	Строка.ResourcePatternTypeИсходный = Строка.ResourcePatternType;
	Строка.EntryPrincipalИсходный = Строка.EntryPrincipal;
	Строка.EntryHostИсходный = Строка.EntryHost;
	Строка.EntryOperationИсходный = Строка.EntryOperation;
	Строка.EntryPermissionИсходный = Строка.EntryPermission;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КонтрольДоступаВосстановитьИсходныеЗначенияСтроки(Строка)
	
	Строка.ResourceType = Строка.ResourceTypeИсходный;
	Строка.ResourceName = Строка.ResourceNameИсходный;
	Строка.ResourcePatternType = Строка.ResourcePatternTypeИсходный;
	Строка.EntryPrincipal = Строка.EntryPrincipalИсходный;
	Строка.EntryHost = Строка.EntryHostИсходный;
	Строка.EntryOperation = Строка.EntryOperationИсходный;
	Строка.EntryPermission = Строка.EntryPermissionИсходный;
	
КонецПроцедуры

#КонецОбласти

#Область СоздатьТему

&НаКлиенте
Процедура СоздатьТему(Команда)
	
	СоздатьТемуРезультат = Неопределено;
	
	СоздатьТемуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТемуНаСервере()
	
	Если ПустаяСтрока(СоздатьТемуТема) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Поле = "СоздатьТемуТема";
		Сообщение.Текст = "Необходимо заполнить тему.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Кафка = РеквизитФормыВЗначение("Объект");
	Кафка.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
	
	Если ЗначениеЗаполнено(СоздатьТемуКоличествоРазделов) Тогда
		_КоличествоРазделов = СоздатьТемуКоличествоРазделов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоздатьТемуКоэффициентРепликации) Тогда
		_КоэффициентРепликации = СоздатьТемуКоэффициентРепликации;
	КонецЕсли;
		
	Конфигурация = КафкаСервер.КонфигурацияБазовая(Кластер);
	Admin = Кафка.AdminCreate("Кафка1С.Администрирование", Конфигурация);
	
	Если Admin <> Неопределено Тогда
		Попытка
			Результат = Кафка.AdminCreateTopic(Admin.Id, Admin.Token, СоздатьТемуТема, _КоличествоРазделов, _КоэффициентРепликации);
			Кафка.AdminRelease(Admin.Id, Admin.Token);
		Исключение
			Кафка.AdminRelease(Admin.Id, Admin.Token);
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Кафка, "Объект");
		
	СоздатьТемуРезультат = СтрокаJSON(Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПозицииТемы

&НаКлиенте
Процедура ПозицииТемыПолучить(Команда)
	
	ПозицииТемыТаблица.Очистить();
	
	ПозицииТемыПолучитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПозицииТемыПолучитьНаСервере()
	
	ПозицииТемыТаблица.Очистить();
	
	Если ПустаяСтрока(ПозицииТемыТема) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Поле = "ПозицииТемыТема";
		Сообщение.Текст = "Необходимо заполнить тему.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Адаптер = РеквизитФормыВЗначение("Объект");
	Адаптер.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
	
	Таймаут = ?(ПозицииТемыТаймаут=0, Неопределено, ПозицииТемыТаймаут);
		
	Кафка = РеквизитФормыВЗначение("Объект");
	Кафка.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
	
	Конфигурация = КафкаСервер.КонфигурацияПолучателя(Кластер);
	Результат = Адаптер.ПолучитьСмещенияТемы("Кафка1С.Администрирование", Конфигурация, ПозицииТемыТема, Таймаут);
		
	ЗначениеВРеквизитФормы(Адаптер, "Объект");
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого PartitionOffsets Из Результат Цикл
		
		С = ПозицииТемыТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(С, PartitionOffsets);
		
	КонецЦикла;
				
КонецПроцедуры

#КонецОбласти

#Область ПолучитьСообщения

&НаКлиенте
Процедура ПолучениеСообщенийПолучить(Команда)
	
	ПолучениеСообщенийРезультат = Неопределено;
	
	ПолучениеСообщенийПолучитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПолучениеСообщенийПолучитьНаСервере()

	Если ПустаяСтрока(ПолучениеСообщенийТема) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Поле = "ПолучениеСообщенийТема";
		Сообщение.Текст = "Необходимо заполнить тему.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ПолучениеСообщенийКоличество = 0 Тогда
		ПолучениеСообщенийКоличество = 1;
	КонецЕсли;
	
	Кафка = РеквизитФормыВЗначение("Объект");
	Кафка.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
		
	Конфигурация = КафкаСервер.КонфигурацияПолучателя(Кластер);
	Конфигурация.Вставить("enable.partition.eof", XMLСтрока(Истина));
	
	Consumer = Кафка.ConsumerCreate("Кафка1С.Администрирование", Конфигурация, "String", "String");
	Если Consumer <> Неопределено Тогда
		Попытка
			TopicPartitionOffset = Новый Структура("Topic, Partition, Offset", ПолучениеСообщенийТема, ПолучениеСообщенийРаздел, ПолучениеСообщенийСмещение);
			Результат = ПолучениеСообщенийПолучитьНаСервере_(Кафка, Consumer, TopicPartitionOffset, ПолучениеСообщенийКоличество);
			Кафка.ConsumerRelease(Consumer.Id, Consumer.Token);
		Исключение
			Кафка.ConsumerRelease(Consumer.Id, Consumer.Token);
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
			
	ЗначениеВРеквизитФормы(Кафка, "Объект");
	
	ПолучениеСообщенийРезультат = СтрокаJSON(Результат);
	
	Если СтрДлина(ПолучениеСообщенийРезультат) > 4000000 Тогда
		ПолучениеСообщенийРезультат = "<< Слишком большой объем данных. >>";
	КонецЕсли;
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ПолучениеСообщенийПолучитьНаСервере_(Кафка, Consumer, TopicPartitionOffset, Количество)
	
	Partitions = Новый Массив;
	Partitions.Добавить(TopicPartitionOffset);
	
	Назначение = Кафка.ConsumerAssign(Consumer.Id, Consumer.Token, Partitions);
	Если Назначение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСообщения = Новый Массив;
	Для Счетчик = 1 По Количество Цикл
		Результат = Кафка.ConsumerConsume(Consumer.Id, Consumer.Token, 30000);
		Если Результат = Неопределено Тогда
			Возврат Неопределено;
		ИначеЕсли Результат = Null Тогда
			Прервать;
		ИначеЕсли Результат.IsPartitionEOF Тогда
			Прервать;
		КонецЕсли;
		МассивСообщения.Добавить(Результат);
	КонецЦикла;
	
	Возврат МассивСообщения;
	
КонецФункции

#КонецОбласти

#Область Прокси

&НаКлиенте
Процедура ПроксиПолучитьОписание(Команда)
	
	ПроксиРезультат = Неопределено;
	
	ПроксиПолучитьОписаниеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроксиПолучитьОписаниеНаСервере()
	
	Адаптер = РеквизитФормыВЗначение("Объект");
	Адаптер.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
	
	Результат = Адаптер.GetProxyInfo();
	
	ЗначениеВРеквизитФормы(Адаптер, "Объект");
	
	ПроксиРезультат = СтрокаJSON(Результат);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроксиПолучитьСостояние(Команда)
	
	ПроксиРезультат = Неопределено;
	
	ПроксиПолучитьСостояниеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроксиПолучитьСостояниеНаСервере()
	
	Адаптер = РеквизитФормыВЗначение("Объект");
	Адаптер.Инициализировать(Кластер.ПроксиАдрес, Кластер.ПроксиПользователь, Кластер.ПроксиПароль, Кластер.ПроксиТаймаут);
	
	Результат = Адаптер.GetProxyHealth();
	
	ЗначениеВРеквизитФормы(Адаптер, "Объект");
	
	ПроксиРезультат = СтрокаJSON(Результат);
		
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеФункции

&НаСервереБезКонтекста
Функция СтрокаJSON(Значение)
		
	Если Значение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеТип = ТипЗнч(Значение);
	Если ЗначениеТип = Тип("Строка") Тогда
		Возврат Значение;
	КонецЕсли;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, "  ");

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Значение);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти
